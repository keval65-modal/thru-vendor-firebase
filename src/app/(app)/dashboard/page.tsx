
'use client';

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { Clipboard } from "lucide-react";
import React from 'react';

const fileContents = [
  {
    path: ".env",
    content: ``
  },
  {
    path: ".vscode/settings.json",
    content: `{\n    "IDX.aI.enableInlineCompletion": true,\n    "IDX.aI.enableCodebaseIndexing": true\n}`
  },
  {
    path: "README.md",
    content: `# Thru Vendor App\n\nThis is the Next.js application for Thru vendors, built with Firebase Studio.`
  },
  {
    path: "apphosting.yaml",
    content: `runConfig:\n  maxInstances: 1\nbranch: main\ncustomDomains:\n  - vendor.kiptech.in\nsecrets:\n  - NEXT_PUBLIC_FIREBASE_API_KEY\n  - NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN\n  - NEXT_PUBLIC_FIREBASE_PROJECT_ID\n  - NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET\n  - NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID\n  - NEXT_PUBLIC_FIREBASE_APP_ID\n  - NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID\n  - GEMINI_API_KEY`
  },
  {
    path: "components.json",
    content: `{\n  "$schema": "https://ui.shadcn.com/schema.json",\n  "style": "default",\n  "rsc": true,\n  "tsx": true,\n  "tailwind": {\n    "config": "tailwind.config.ts",\n    "css": "src/app/globals.css",\n    "baseColor": "neutral",\n    "cssVariables": true,\n    "prefix": ""\n  },\n  "aliases": {\n    "components": "@/components",\n    "utils": "@/lib/utils",\n    "ui": "@/components/ui",\n    "lib": "@/lib",\n    "hooks": "@/hooks"\n  },\n  "iconLibrary": "lucide"\n}`
  },
  {
    path: "firebase.json",
    content: `{\n  "hosting": {\n    "site": "thru-vendor-firebase",\n    "rewrites": [\n      {\n        "source": "**",\n        "apphosting": {\n          "backendId": "thru-vendor-firebase",\n          "region": "us-west1"\n        }\n      }\n    ]\n  }\n}`
  },
  {
    path: "next.config.ts",
    content: `require('dotenv').config()\n\nimport type {NextConfig} from 'next';\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'placehold.co',\n        port: '',\n        pathname: '/**',\n      },\n    ],\n  },\n};\n\nexport default nextConfig;`
  },
  {
    path: "package.json",
    content: `{\n  "name": "nextn",\n  "version": "0.1.0",\n  "private": true,\n  "scripts": {\n    "dev": "next dev --turbopack -p 9002",\n    "genkit:dev": "genkit start -- tsx src/ai/dev.ts",\n    "genkit:watch": "genkit start -- tsx --watch src/ai/dev.ts",\n    "build": "next build",\n    "start": "next start",\n    "lint": "next lint",\n    "typecheck": "tsc --noEmit"\n  },\n  "dependencies": {\n    "@genkit-ai/googleai": "^1.8.0",\n    "@genkit-ai/next": "^1.8.0",\n    "@hookform/resolvers": "^3.9.0",\n    "@radix-ui/react-accordion": "^1.2.3",\n    "@radix-ui/react-alert-dialog": "^1.1.6",\n    "@radix-ui/react-avatar": "^1.1.3",\n    "@radix-ui/react-checkbox": "^1.1.4",\n    "@radix-ui/react-dialog": "^1.1.6",\n    "@radix-ui/react-dropdown-menu": "^2.1.6",\n    "@radix-ui/react-label": "^2.1.2",\n    "@radix-ui/react-menubar": "^1.1.6",\n    "@radix-ui/react-popover": "^1.1.6",\n    "@radix-ui/react-progress": "^1.1.2",\n    "@radix-ui/react-radio-group": "^1.2.3",\n    "@radix-ui/react-scroll-area": "^1.2.3",\n    "@radix-ui/react-select": "^2.1.6",\n    "@radix-ui/react-separator": "^1.1.2",\n    "@radix-ui/react-slider": "^1.2.3",\n    "@radix-ui/react-slot": "^1.1.2",\n    "@radix-ui/react-switch": "^1.1.3",\n    "@radix-ui/react-tabs": "^1.1.3",\n    "@radix-ui/react-toast": "^1.2.6",\n    "@radix-ui/react-tooltip": "^1.1.8",\n    "class-variance-authority": "^0.7.1",\n    "clsx": "^2.1.1",\n    "date-fns": "^3.6.0",\n    "dotenv": "^16.4.5",\n    "firebase": "^10.12.2",\n    "genkit": "^1.8.0",\n    "lucide-react": "^0.475.0",\n    "next": "15.3.3",\n    "papaparse": "^5.4.1",\n    "patch-package": "^8.0.0",\n    "qrcode.react": "^3.1.0",\n    "react": "^18.3.1",\n    "react-day-picker": "^8.10.1",\n    "react-dom": "^18.3.1",\n    "react-hook-form": "^7.52.1",\n    "react-image-crop": "^11.0.6",\n    "recharts": "^2.15.1",\n    "tailwind-merge": "^3.0.1",\n    "tailwindcss-animate": "^1.0.7",\n    "zod": "^3.24.1"\n  },\n  "devDependencies": {\n    "@types/node": "^20",\n    "@types/papaparse": "^5.3.14",\n    "@types/qrcode.react": "^1.0.5",\n    "@types/react": "^18",\n    "@types/react-dom": "^18",\n    "genkit-cli": "^1.8.0",\n    "postcss": "^8",\n    "tailwindcss": "^3.4.1",\n    "typescript": "^5"\n  }\n}`
  },
  {
    path: "src/ai/dev.ts",
    content: `import { config } from 'dotenv';\nconfig({ path: \`.env\` });\n\nimport '@/ai/flows/stock-alert.ts';\nimport '@/ai/flows/extract-menu-flow.ts';\nimport '@/ai/flows/process-csv-flow.ts';`
  },
  {
    path: "src/ai/flows/extract-menu-flow.ts",
    content: `'use server';\n/**\n * @fileOverview A Genkit flow to extract structured menu data from a PDF data URI.\n *\n * - extractMenuData - A function that handles the menu extraction process.\n * - ExtractMenuInput - The input type for the extractMenuData function.\n * - ExtractMenuOutput - The return type for the extractMenuData function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst MenuItemSchema = z.object({\n  category: z.string().describe('The category of the menu item (e.g., Appetizers, Main Courses, Desserts).'),\n  itemName: z.string().describe('The name of the menu item.'),\n  price: z.string().describe('The price of the menu item (as a string, e.g., "$10.99", "Â£8.50").'),\n  description: z.string().optional().describe('A brief description of the menu item, if available.'),\n});\n\nconst ExtractMenuInputSchema = z.object({\n  menuDataUri: z\n    .string()\n    .describe(\n      "The menu document (typically a PDF) as a data URI. Expected format: 'data:application/pdf;base64,<encoded_data>'.\"\n    ),\n  vendorId: z.string().describe('The ID of the vendor uploading the menu.'),\n});\nexport type ExtractMenuInput = z.infer<typeof ExtractMenuInputSchema>;\n\nconst ExtractMenuOutputSchema = z.object({\n extractedItems: z.array(MenuItemSchema).describe('An array of extracted menu items.'),\n rawText: z.string().optional().describe('Raw text extracted if structured parsing fails or as supplementary info.')\n});\nexport type ExtractMenuOutput = z.infer<typeof ExtractMenuOutputSchema>;\n\nexport async function extractMenuData(input: ExtractMenuInput): Promise<ExtractMenuOutput> {\n  return extractMenuFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'extractMenuPrompt',\n  input: {schema: ExtractMenuInputSchema},\n  output: {schema: ExtractMenuOutputSchema},\n  prompt: \`You are an expert menu parsing AI. You are given a document, which is a restaurant menu, provided as a data URI.\nYour task is to meticulously analyze this menu and extract all food and beverage items.\n\nFor each item, identify:\n1.  Its category (e.g., "Appetizers", "Soups", "Main Courses", "Desserts", "Beverages"). If items are not explicitly categorized, infer logical categories based on common menu structures.\n2.  The name of the item.\n3.  The price of the item. Ensure you capture the currency symbol if present.\n4.  A brief description of the item, if one is provided on the menu.\n\nStructure your output as a JSON object containing a key "extractedItems". The value of "extractedItems" should be an array of objects, where each object represents a menu item and has the following fields: "category", "itemName", "price", and an optional "description".\n\nIf you also extract raw text from the document that might be useful context, provide it in the "rawText" field.\n\nMenu Document:\n{{media url=menuDataUri}}\n\`,\n});\n\nconst extractMenuFlow = ai.defineFlow(\n  {\n    name: 'extractMenuFlow',\n    inputSchema: ExtractMenuInputSchema,\n    outputSchema: ExtractMenuOutputSchema,\n  },\n  async (input) => {\n    // Using the default model configured in genkit.ts which should be gemini-2.0-flash or similar\n    console.log(\`[extractMenuFlow] Starting menu extraction for vendor: \${input.vendorId}, menu URI length: \${input.menuDataUri.length}\`);\n    try {\n      const {output} = await prompt(input);\n      if (!output) {\n          console.error("[extractMenuFlow] The AI model did not return any output.");\n          throw new Error("AI model returned no output for menu extraction.");\n      }\n      if (!output.extractedItems) {\n        console.warn("[extractMenuFlow] AI model output is missing 'extractedItems'. Output:", JSON.stringify(output));\n         // Return a valid empty structure if items are missing but output itself exists\n        return { extractedItems: [], rawText: output.rawText || "AI output was present but no 'extractedItems' array found." };\n      }\n      console.log(\`[extractMenuFlow] Successfully extracted \${output.extractedItems.length} items for vendor: \${input.vendorId}\`);\n      return output;\n    } catch (error) {\n        console.error(\`[extractMenuFlow] Error during Genkit prompt execution for vendor \${input.vendorId}:\`, error);\n        if (error instanceof Error) {\n            throw new Error(\`AI processing error: \${error.message}\`);\n        }\n        throw new Error("An unknown error occurred during AI menu processing.");\n    }\n  }\n);`
  },
  {
    path: "src/ai/flows/process-csv-flow.ts",
    content: `'use server';\n/**\n * @fileOverview A Genkit flow to determine column mappings from a CSV sample.\n * This flow receives a small sample of a CSV file (headers and a few rows)\n * and determines how the columns in the CSV map to the target GlobalItem schema fields.\n *\n * - processCsvData - A function that handles the CSV mapping process.\n * - ProcessCsvInput - The input type for the processCsvData function.\n * - ProcessCsvOutput - The return type for the processCsvData function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'zod';\n\n// Describes the expected output: a mapping from our schema fields to the CSV column headers.\nconst CsvMappingSchema = z.object({\n  itemName: z.string().describe("The name of the column in the CSV that maps to the product's name. Likely 'Name' or 'Product Name'."),\n  sharedItemType: z.string().optional().describe("The column name for the high-level item type (e.g., 'grocery', 'medical'). This is likely the 'Category' column."),\n  defaultCategory: z.string().describe("The column name for the specific item category. This is likely the 'SubCategory' column, or 'Category' if SubCategory is not present."),\n  defaultUnit: z.string().optional().describe("The column name for the unit of measurement. Likely 'Quantity' or 'Unit'."),\n  brand: z.string().optional().describe("The column name for the product's brand. Likely 'Brand'."),\n  mrp: z.string().optional().describe("The column name for the Maximum Retail Price. This should be the original, non-discounted price column, likely 'Price'."),\n  price: z.string().optional().describe("The column name for the actual selling price. This is likely the 'DiscountedPrice' or 'Selling Price' column."),\n  description: z.string().optional().describe("The column name for the product's description. Likely 'Description'."),\n  barcode: z.string().optional().describe("The column name for the product's barcode or UPC."),\n});\n\n\nconst ProcessCsvInputSchema = z.object({\n  csvSample: z.string().describe("A string containing the comma-separated header row of a CSV file, used to determine column mappings."),\n});\nexport type ProcessCsvInput = z.infer<typeof ProcessCsvInputSchema>;\n\nconst ProcessCsvOutputSchema = z.object({\n  mappings: CsvMappingSchema.describe('An object where keys are our target schema fields and values are the corresponding column names from the CSV header.'),\n});\nexport type ProcessCsvOutput = z.infer<typeof ProcessCsvOutputSchema>;\n\n\nexport async function processCsvData(input: ProcessCsvInput): Promise<ProcessCsvOutput> {\n  return processCsvFlow(input);\n}\n\n\nconst prompt = ai.definePrompt({\n    name: 'processCsvPrompt',\n    input: { schema: ProcessCsvInputSchema },\n    output: { schema: ProcessCsvOutputSchema },\n    prompt: \`You are an expert data mapping AI. You will be given a string of comma-separated column headers from a CSV file.\n    Your task is to analyze the headers and determine which column header corresponds to each field in our target schema.\n\n    Our target schema fields are:\n    - itemName: The name of the product.\n    - sharedItemType: The general type like 'grocery' or 'medical'. Use the 'Category' column.\n    - defaultCategory: The specific category. Use 'SubCategory' if available, otherwise use 'Category'.\n    - defaultUnit: The unit of sale (e.g., '500 gm'). Use 'Quantity' or similar.\n    - brand: The brand of the product.\n    - mrp: The Maximum Retail Price (original price). Map this from a column named 'Price' or similar.\n    - price: The actual selling price. Map this from a column named 'DiscountedPrice' or similar.\n    - description: A description of the product.\n    - barcode: The product's barcode.\n\n    Your output MUST be a valid JSON object that conforms to the specified schema, and nothing else. Do not include any extra text, explanations, or markdown formatting like \\\`\\\`\\\`json.\n\n    Here are the CSV headers:\n    ---\n    {{{csvSample}}}\n    ---\n    \`,\n});\n\n\nconst processCsvFlow = ai.defineFlow(\n  {\n    name: 'processCsvFlow',\n    inputSchema: ProcessCsvInputSchema,\n    outputSchema: ProcessCsvOutputSchema,\n  },\n  async (input) => {\n    console.log(\`[processCsvFlow] Started: Determining column mappings from CSV headers.\`);\n    \n    if (!input.csvSample || input.csvSample.trim().length === 0) {\n        console.warn("[processCsvFlow] Input CSV sample is empty.");\n        throw new Error("CSV sample cannot be empty.");\n    }\n\n    try {\n        const { output } = await prompt(input);\n        \n        if (!output || !output.mappings) {\n            console.error("[processCsvFlow] AI mapping failed to return valid structured mappings. Raw output:", output);\n            // This fallback logic is now less necessary with definePrompt, but kept for resilience.\n            let rawOutputText = '';\n            try {\n                const result = await ai.generate({ prompt: prompt.prompt!, input: input });\n                rawOutputText = result.text ?? '';\n                const jsonMatch = rawOutputText.match(/\\{[\\s\\S]*\\}/);\n                if (jsonMatch) {\n                    const parsed = JSON.parse(jsonMatch[0]);\n                    const validated = ProcessCsvOutputSchema.safeParse(parsed);\n                    if (validated.success) {\n                        console.log("[processCsvFlow] Successfully recovered JSON from raw text response.");\n                        return validated.data;\n                    }\n                }\n            } catch (innerError) {\n                 console.error("[processCsvFlow] Could not recover from non-JSON response. Raw output was:", rawOutputText, "Inner error:", innerError);\n                 throw new Error("The model has returned a non-JSON response.");\n            }\n            \n            throw new Error("AI could not determine column mappings from the provided CSV sample.");\n        }\n        \n        console.log(\`[processCsvFlow] Successfully determined column mappings:\`, output.mappings);\n        return output;\n\n    } catch (error) {\n        console.error("[processCsvFlow] An error occurred during AI processing:", error);\n        const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";\n        // Throw a specific, clear error to be caught by the server action.\n        throw new Error(\`The AI failed to determine mappings: \${errorMessage}\`);\n    }\n  }\n);`
  },
  {
    path: "src/ai/flows/stock-alert.ts",
    content: `'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for predicting low stock items and suggesting restocking.\n *\n * - checkStockLevels - A function that initiates the stock level check and alerting process.\n * - CheckStockLevelsInput - The input type for the checkStockLevels function.\n * - CheckStockLevelsOutput - The return type for the checkStockLevels function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst CheckStockLevelsInputSchema = z.object({\n  historicalOrderData: z\n    .string()\n    .describe('Historical order data in JSON format, including product names and quantities.'),\n  currentStockLevels: z\n    .string()\n    .describe('Current stock levels in JSON format, including product names and quantities.'),\n});\nexport type CheckStockLevelsInput = z.infer<typeof CheckStockLevelsInputSchema>;\n\nconst CheckStockLevelsOutputSchema = z.object({\n  lowStockItems: z\n    .array(z.string())\n    .describe('List of product names that are predicted to be low in stock.'),\n  restockSuggestions: z\n    .string()\n    .describe('Suggestions for restocking, including product names and quantities.'),\n});\nexport type CheckStockLevelsOutput = z.infer<typeof CheckStockLevelsOutputSchema>;\n\nexport async function checkStockLevels(input: CheckStockLevelsInput): Promise<CheckStockLevelsOutput> {\n  return checkStockLevelsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'checkStockLevelsPrompt',\n  input: {schema: CheckStockLevelsInputSchema},\n  output: {schema: CheckStockLevelsOutputSchema},\n  prompt: \`You are an AI assistant specializing in inventory management and stock prediction.\n\nYou are provided with historical order data and current stock levels. Analyze the data to predict which items are likely to run low in stock soon.\n\nBased on the analysis, provide a list of items that need restocking and suggest the quantities to restock.\n\nHistorical Order Data: {{{historicalOrderData}}}\nCurrent Stock Levels: {{{currentStockLevels}}}\n\nOutput the lowStockItems and restockSuggestions fields appropriately.\n\`,\n});\n\nconst checkStockLevelsFlow = ai.defineFlow(\n  {\n    name: 'checkStockLevelsFlow',\n    inputSchema: CheckStockLevelsInputSchema,\n    outputSchema: CheckStockLevelsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);`
  },
  {
    path: "src/ai/genkit.ts",
    content: `import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI({apiVersion: 'v1beta'})],\n  model: 'googleai/gemini-1.5-flash-latest',\n});`
  },
  {
    path: "src/app/(app)/admin/[vendorId]/edit/EditVendorForm.tsx",
    content: `'use client';\n\nimport { useFormState, useFormStatus } from 'react-dom';\nimport { useEffect } from 'react';\nimport { z } from 'zod';\nimport { useToast } from '@/hooks/use-toast';\nimport type { Vendor } from '@/lib/inventoryModels';\nimport { updateVendorByAdmin, type UpdateVendorByAdminFormState } from '../actions';\nimport { Button } from "@/components/ui/button";\nimport { Input } from "@/components/ui/input";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";\nimport { Switch } from "@/components/ui/switch";\nimport { Label } from '@/components/ui/label';\nimport { Loader2, Save } from 'lucide-react';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\n\nconst storeCategories = ["Grocery Store", "Restaurant", "Bakery", "Boutique", "Electronics", "Cafe", "Pharmacy", "Liquor Shop", "Pet Shop", "Gift Shop", "Other"];\n\nconst initialState: UpdateVendorByAdminFormState = {};\n\nfunction SubmitButton() {\n    const { pending } = useFormStatus();\n    return (\n        <Button type="submit" disabled={pending}>\n            {pending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Save className="mr-2 h-4 w-4" />}\n            Save Changes\n        </Button>\n    )\n}\n\ninterface EditVendorFormProps {\n    vendor: Vendor;\n}\n\nexport function EditVendorForm({ vendor }: EditVendorFormProps) {\n    const { toast } = useToast();\n    const updateVendorAction = updateVendorByAdmin.bind(null, vendor.id!);\n    const [state, formAction] = useFormState(updateVendorAction, initialState);\n\n    useEffect(() => {\n        if (state.success) {\n            toast({ title: "Success", description: state.message });\n        }\n        if (state.error) {\n            toast({ variant: "destructive", title: "Error", description: state.error });\n        }\n    }, [state, toast]);\n\n    return (\n        <form action={formAction} className="space-y-6">\n            {state.error && (\n                 <Alert variant="destructive">\n                    <AlertTitle>Update Failed</AlertTitle>\n                    <AlertDescription>{state.error}</AlertDescription>\n                 </Alert>\n            )}\n             {state.success && (\n                 <Alert variant="default" className="border-green-500">\n                    <AlertTitle>Success!</AlertTitle>\n                    <AlertDescription>{state.message}</AlertDescription>\n                 </Alert>\n            )}\n\n            <div className="space-y-2">\n                <Label htmlFor="shopName">Shop Name</Label>\n                <Input id="shopName" name="shopName" defaultValue={vendor.shopName} />\n                {state.fields?.shopName && <p className="text-sm text-destructive">{state.fields.shopName[0]}</p>}\n            </div>\n\n            <div className="space-y-2">\n                <Label htmlFor="ownerName">Owner Name</Label>\n                <Input id="ownerName" name="ownerName" defaultValue={vendor.ownerName} />\n                 {state.fields?.ownerName && <p className="text-sm text-destructive">{state.fields.ownerName[0]}</p>}\n            </div>\n\n            <div className="space-y-2">\n                <Label htmlFor="storeCategory">Store Category</Label>\n                <Select name="storeCategory" defaultValue={vendor.storeCategory}>\n                    <SelectTrigger id="storeCategory">\n                        <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                        {storeCategories.map(c => <SelectItem key={c} value={c}>{c}</SelectItem>)}\n                    </SelectContent>\n                </Select>\n                 {state.fields?.storeCategory && <p className="text-sm text-destructive">{state.fields.storeCategory[0]}</p>}\n            </div>\n\n            <div className="flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm">\n                 <div className="space-y-0.5">\n                     <Label htmlFor="isActiveOnThru">Active on Thru</Label>\n                     <p className="text-sm text-muted-foreground">Controls if the vendor is visible to customers.</p>\n                 </div>\n                 <Switch\n                    id="isActiveOnThru"\n                    name="isActiveOnThru"\n                    defaultChecked={vendor.isActiveOnThru}\n                 />\n            </div>\n\n            <SubmitButton />\n        </form>\n    );\n}`
  },
  {
    path: "src/app/(app)/admin/[vendorId]/edit/page.tsx",
    content: `import { notFound } from 'next/navigation';\nimport { getVendorForEditing } from '../actions';\nimport { EditVendorForm } from './EditVendorForm';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { UserCog } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport Link from 'next/link';\nimport { ArrowLeft } from 'lucide-react';\n\nexport default async function EditVendorPage({ params }: { params: { vendorId: string } }) {\n  const { vendor, error } = await getVendorForEditing(params.vendorId);\n\n  if (error) {\n    // This could render a more specific error page if needed\n    return <div>Error: {error}</div>;\n  }\n\n  if (!vendor) {\n    notFound();\n  }\n\n  return (\n    <div className="container mx-auto py-8 px-4 sm:px-6 lg:px-8 max-w-2xl">\n        <div className="mb-4">\n            <Button variant="outline" asChild>\n                <Link href="/admin">\n                    <ArrowLeft className="mr-2 h-4 w-4" />\n                    Back to Admin Panel\n                </Link>\n            </Button>\n        </div>\n        <Card>\n            <CardHeader>\n                <CardTitle className="flex items-center">\n                    <UserCog className="mr-3 h-6 w-6 text-primary" />\n                    Edit Vendor\n                </CardTitle>\n                <CardDescription>\n                    Update details for <span className="font-semibold text-foreground">{vendor.shopName}</span>.\n                </CardDescription>\n            </CardHeader>\n            <CardContent>\n                <EditVendorForm vendor={vendor} />\n            </CardContent>\n        </Card>\n    </div>\n  );\n}`
  },
  {
    path: "src/app/(app)/admin/actions.ts",
    content: `'use server';\n\nimport { z } from 'zod';\nimport { db } from '@/lib/firebase-admin-client'; // Using the client SDK-based db\nimport { Timestamp, collection, getDocs, doc, updateDoc, deleteDoc, getDoc, writeBatch } from 'firebase/firestore';\nimport type { Vendor } from '@/lib/inventoryModels';\nimport { getSession } from '@/lib/auth';\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\n\nconst ADMIN_LOGIN_ROUTE = '/admin/login';\n\n// Security is now enforced by Firestore Security Rules, not by dbCheck.\n\n/**\n * Fetches all vendors from the 'vendors' collection.\n * Enforces admin-only access via Firestore Security Rules.\n */\nexport async function getAllVendors(): Promise<{ vendors?: Vendor[], error?: string }> {\n  try {\n    const vendorsCollection = collection(db, 'vendors');\n    const vendorSnapshot = await getDocs(vendorsCollection);\n    const vendorsList = vendorSnapshot.docs.map(docSnap => {\n        const data = docSnap.data();\n        return {\n            id: docSnap.id,\n            ...data,\n            // Convert Timestamps to ISO strings for client-side compatibility\n            createdAt: data.createdAt instanceof Timestamp ? data.createdAt.toDate().toISOString() : data.createdAt,\n            updatedAt: data.updatedAt instanceof Timestamp ? data.updatedAt.toDate().toISOString() : data.updatedAt,\n        } as Vendor;\n    });\n    return { vendors: vendorsList };\n  } catch (error) {\n    console.error('[AdminActions] Error fetching vendors:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { error: \`Failed to fetch vendors. This may be a permissions issue. Ensure your Firestore rules are set correctly for admins. Details: \${errorMessage}\` };\n  }\n}\n\nconst UpdateVendorByAdminSchema = z.object({\n  shopName: z.string().min(1, "Shop name is required."),\n  ownerName: z.string().min(1, "Owner name is required."),\n  storeCategory: z.string().min(1, "Store category is required."),\n  isActiveOnThru: z.preprocess((val) => val === 'on' || val === true, z.boolean()),\n});\n\nexport type UpdateVendorByAdminFormState = {\n    success?: boolean;\n    error?: string;\n    message?: string;\n    fields?: Record<string, string[]>;\n};\n\n/**\n * Updates a vendor's details from the dedicated admin edit page.\n */\nexport async function updateVendorByAdmin(\n    vendorId: string,\n    prevState: UpdateVendorByAdminFormState,\n    formData: FormData\n): Promise<UpdateVendorByAdminFormState> {\n    const validatedFields = UpdateVendorByAdminSchema.safeParse(\n        Object.fromEntries(formData.entries())\n    );\n    \n    if (!validatedFields.success) {\n        return {\n            error: "Invalid data submitted.",\n            fields: validatedFields.error.flatten().fieldErrors,\n        };\n    }\n    \n    const updates = validatedFields.data;\n\n    try {\n        const vendorRef = doc(db, 'vendors', vendorId);\n        await updateDoc(vendorRef, {\n            ...updates,\n            type: updates.storeCategory,\n            updatedAt: Timestamp.now(),\n        });\n        \n        revalidatePath('/admin');\n        revalidatePath(\`/admin/\${vendorId}/edit\`);\n        return { success: true, message: "Vendor updated successfully." };\n\n    } catch (error) {\n        console.error(\`[AdminActions] Error updating vendor \${vendorId}:\`, error);\n        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n        return { error: \`Failed to update vendor: \${errorMessage}\` };\n    }\n}\n\n\nexport type DeleteVendorResult = {\n    success: boolean;\n    error?: string;\n    message?: string;\n};\n\n/**\n * Deletes a vendor and all their inventory items.\n * WARNING: This does NOT delete the user from Firebase Auth. That must be done manually.\n */\nexport async function deleteVendorAndInventory(vendorId: string): Promise<DeleteVendorResult> {\n    if (!vendorId) {\n        return { success: false, error: 'Vendor ID is missing.' };\n    }\n    \n    console.log(\`[AdminActions] Initiating deletion for vendor: \${vendorId}\`);\n\n    try {\n        const batch = writeBatch(db);\n\n        // 1. Find and stage deletion for all inventory items for that vendor\n        const inventoryCollectionRef = collection(db, 'vendors', vendorId, 'inventory');\n        const inventorySnapshot = await getDocs(inventoryCollectionRef);\n        \n        let deletedItemsCount = 0;\n        if (!inventorySnapshot.empty) {\n            inventorySnapshot.forEach(docSnap => {\n                batch.delete(docSnap.ref);\n                deletedItemsCount++;\n            });\n            console.log(\`[AdminActions] Staged deletion of \${deletedItemsCount} inventory items for vendor: \${vendorId}\`);\n        } else {\n            console.log(\`[AdminActions] No inventory items found for vendor: \${vendorId}\`);\n        }\n        \n        // 2. Stage deletion for the vendor document itself\n        const vendorRef = doc(db, 'vendors', vendorId);\n        batch.delete(vendorRef);\n        console.log(\`[AdminActions] Staged deletion of vendor document: \${vendorId}\`);\n        \n        // 3. Commit all deletes in a single atomic operation\n        await batch.commit();\n\n        console.log(\`[AdminActions] Successfully deleted vendor \${vendorId} and their inventory.\`);\n        revalidatePath('/admin');\n        return { success: true, message: \`Vendor and their \${deletedItemsCount} inventory items have been deleted.\` };\n\n    } catch (error) {\n        console.error(\`[AdminActions] Error during deletion of vendor \${vendorId}:\`, error);\n        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n        return { success: false, error: \`Failed to delete vendor: \${errorMessage}\` };\n    }\n}\n\n\n/**\n * Fetches a single vendor's details for the edit page.\n */\nexport async function getVendorForEditing(vendorId: string): Promise<{ vendor?: Vendor, error?: string }> {\n  try {\n    const vendorRef = doc(db, 'vendors', vendorId);\n    const vendorSnap = await getDoc(vendorRef);\n    if (!vendorSnap.exists) {\n      return { error: 'Vendor not found.' };\n    }\n    const vendorData = vendorSnap.data() as Omit<Vendor, 'id'>;\n    return {\n      vendor: {\n        id: vendorSnap.id,\n        ...vendorData,\n        createdAt: vendorData.createdAt instanceof Timestamp ? vendorData.createdAt.toDate().toISOString() : vendorData.createdAt,\n        updatedAt: vendorData.updatedAt instanceof Timestamp ? vendorData.updatedAt.toDate().toISOString() : vendorData.updatedAt,\n      } as Vendor\n    };\n  } catch (error) {\n    console.error(\`[AdminActions] Error fetching vendor \${vendorId} for editing:\`, error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { error: \`Failed to fetch vendor: \${errorMessage}\` };\n  }\n}`
  },
  {
    path: "src/app/(app)/admin/layout.tsx",
    content: `// This is the dedicated layout for the /admin section.\n// It does not use the AppShell, creating a separate environment.\nexport default function AdminLayout({ children }: { children: React.ReactNode }) {\n  return <>{children}</>;\n}`
  },
  {
    path: "src/app/(app)/admin/login/AdminLoginForm.tsx",
    content: `'use client';\n\nimport { useActionState, useEffect, useState } from 'react';\nimport { useFormStatus } from 'react-dom';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Loader2, LogIn, Eye, EyeOff, AlertTriangle, KeyRound } from 'lucide-react';\nimport { handleAdminLogin, type LoginState } from './actions';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport { useRouter } from 'next/navigation';\nimport { Separator } from '@/components/ui/separator';\n\nconst initialState: LoginState = { success: false };\n\nfunction SubmitButton({ isDirectLogin }: { isDirectLogin?: boolean }) {\n  const { pending } = useFormStatus();\n  if (isDirectLogin) {\n      return (\n          <Button\n              type="submit"\n              variant="secondary"\n              className="w-full"\n              name="isDirectLogin"\n              value="true"\n              disabled={pending}\n          >\n              {pending ? (\n                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />\n              ) : (\n                  <KeyRound className="mr-2 h-4 w-4" />\n              )}\n              Direct Admin Login\n          </Button>\n      )\n  }\n  return (\n    <Button type="submit" className="w-full bg-primary hover:bg-primary/90 text-primary-foreground" disabled={pending}>\n      {pending ? (\n        <Loader2 className="mr-2 h-4 w-4 animate-spin" />\n      ) : (\n        <LogIn className="mr-2 h-4 w-4" />\n      )}\n      Sign In\n    </Button>\n  );\n}\n\nexport function AdminLoginForm() {\n  const [state, formAction] = useActionState(handleAdminLogin, initialState);\n  const { toast } = useToast();\n  const router = useRouter();\n  const [showPassword, setShowPassword] = useState(false);\n\n  useEffect(() => {\n    if (state.success) {\n      toast({ title: 'Login Successful', description: 'Redirecting to Admin Panel...' });\n      // Using window.location.href for a more forceful redirect after state changes.\n      window.location.href = '/admin';\n    }\n  }, [state, toast, router]);\n\n  return (\n    <form action={formAction} className="space-y-6">\n        {state.error && (\n            <Alert variant="destructive">\n                <AlertTriangle className="h-4 w-4" />\n                <AlertTitle>Login Failed</AlertTitle>\n                <AlertDescription>{state.error}</AlertDescription>\n            </Alert>\n        )}\n        <div className="space-y-2">\n            <Label htmlFor="email">Admin Email</Label>\n            <Input\n                id="email"\n                name="email"\n                type="email"\n                placeholder="admin@example.com"\n                required\n            />\n            {state.fields?.email && <p className="text-sm text-destructive">{state.fields.email[0]}</p>}\n        </div>\n        <div className="space-y-2">\n            <Label htmlFor="password">Password</Label>\n            <div className="relative">\n                <Input\n                    id="password"\n                    name="password"\n                    type={showPassword ? "text" : "password"}\n                    placeholder="â¢â¢â¢â¢â¢â¢â¢â¢"\n                />\n                <Button\n                    type="button"\n                    variant="ghost"\n                    size="icon"\n                    className="absolute right-1 top-1/2 h-7 w-7 -translate-y-1/2 text-muted-foreground hover:text-foreground"\n                    onClick={() => setShowPassword(!showPassword)}\n                    aria-label={showPassword ? "Hide password" : "Show password"}\n                    >\n                    {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}\n                </Button>\n            </div>\n            {state.fields?.password && <p className="text-sm text-destructive">{state.fields.password[0]}</p>}\n        </div>\n        \n        <SubmitButton />\n\n        <div className="relative">\n            <Separator />\n            <div className="absolute inset-x-0 top-1/2 -translate-y-1/2 flex justify-center">\n                <span className="bg-card px-2 text-xs text-muted-foreground">OR</span>\n            </div>\n        </div>\n\n        <SubmitButton isDirectLogin={true} />\n    </form>\n  );\n}`
  },
  {
    path: "src/app/(app)/admin/login/actions.ts",
    content: `'use server';\n\nimport { z } from 'zod';\nimport { createSession } from '@/lib/auth';\nimport { getFirebaseAuth } from '@/lib/firebase';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\n\nconst LoginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1, 'Password is required.'),\n});\n\nexport type LoginState = {\n  success: boolean;\n  error?: string;\n  fields?: Record<string, string[]>;\n}\n\nexport async function handleAdminLogin(prevState: LoginState, formData: FormData): Promise<LoginState> {\n  const isDirectLogin = formData.get('isDirectLogin') === 'true';\n\n  if (isDirectLogin) {\n    const adminUid = "1kYPC0L4k0Yc6Qz1h1v10o9A2fB3"; // UID for keval@kiptech.in\n    if (!adminUid) {\n        return { success: false, error: "Direct login is not configured correctly." };\n    }\n    console.log(\`[Direct Login] Attempting to create session for admin UID: \${adminUid}\`);\n    const sessionResult = await createSession(adminUid, true); // Pass true to bypass role check\n    if (!sessionResult.success) {\n        return { success: false, error: sessionResult.error || 'Direct login failed during session creation.' };\n    }\n    return { success: true };\n  }\n\n  const validatedFields = LoginSchema.safeParse(Object.fromEntries(formData));\n\n  if (!validatedFields.success) {\n    return { \n      success: false, \n      error: 'Invalid email or password format.',\n      fields: validatedFields.error.flatten().fieldErrors,\n    };\n  }\n  \n  const { email, password } = validatedFields.data;\n  \n  try {\n    const auth = getFirebaseAuth();\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    const uid = userCredential.user.uid;\n\n    const sessionResult = await createSession(uid);\n\n    if (!sessionResult.success) {\n        return { success: false, error: sessionResult.error };\n    }\n\n    return { success: true };\n\n  } catch (error: any) {\n    console.error('[Admin Login] Error:', error.code, error.message);\n    \n    if (\n      error.code === 'auth/user-not-found' ||\n      error.code === 'auth/wrong-password' ||\n      error.code === 'auth/invalid-credential'\n    ) {\n      return { success: false, error: 'Invalid credentials. Please check your email and password.' };\n    }\n    \n    return { success: false, error: 'An unexpected error occurred during login.' };\n  }\n}`
  },
  {
    path: "src/app/(app)/admin/login/page.tsx",
    content: `import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ShieldCheck } from 'lucide-react';\nimport { AdminLoginForm } from './AdminLoginForm';\nimport Link from 'next/link';\n\nexport default function AdminLoginPage() {\n  return (\n    <main className="flex min-h-screen flex-col items-center justify-center bg-muted/40 p-4 sm:p-6 md:p-8">\n      <Card className="w-full max-w-md shadow-xl">\n        <CardHeader className="text-center">\n          <div className="mb-4 flex justify-center">\n            <ShieldCheck className="h-12 w-12 text-primary" />\n          </div>\n          <CardTitle className="text-3xl font-bold text-foreground">Admin Panel</CardTitle>\n          <CardDescription className="text-muted-foreground">\n            Sign in to access the administrator dashboard.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <AdminLoginForm />\n           <div className="mt-4 text-center text-sm">\n            <Link\n              href="/forgot-password"\n              className="underline text-muted-foreground hover:text-primary"\n            >\n              Forgot your password?\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n      <p className="mt-8 text-center text-xs text-muted-foreground">\n        &copy; {new Date().getFullYear()} Thru. All rights reserved.\n      </p>\n    </main>\n  );\n}`
  },
  {
    path: "src/app/(app)/admin/page.tsx",
    content: `'use client';\n\nimport { useEffect, useState, useCallback } from 'react';\nimport { Button } from "@/components/ui/button";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";\nimport { Shield, Loader2, Edit, Trash2, FileUp, LayoutDashboard, AlertCircle, UserX } from "lucide-react";\nimport type { Vendor } from '@/lib/inventoryModels';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useToast } from '@/hooks/use-toast';\nimport { getAllVendors, deleteVendorAndInventory } from './actions';\nimport { BulkAddDialog } from '@/components/inventory/BulkAddDialog';\nimport Link from 'next/link';\n\n\n// --- Main Admin Page Component ---\nexport default function AdminPage() {\n    const { toast } = useToast();\n    const [vendors, setVendors] = useState<Vendor[]>([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n\n    const [isDeleting, setIsDeleting] = useState(false);\n    const [vendorToDelete, setVendorToDelete] = useState<Vendor | null>(null);\n\n    const fetchVendors = useCallback(async () => {\n        setIsLoading(true);\n        const result = await getAllVendors();\n        if (result.vendors) {\n            setVendors(result.vendors);\n            setError(null);\n        } else {\n            setVendors([]);\n            setError(result.error || "Failed to load vendors.");\n        }\n        setIsLoading(false);\n    }, []);\n\n    useEffect(() => {\n        // The server action \`getAllVendors\` will handle the auth check.\n        fetchVendors();\n    }, [fetchVendors]);\n\n\n    const handleDeleteVendor = async (vendorId: string | undefined) => {\n        if (!vendorId) {\n            toast({ variant: "destructive", title: "Error", description: "Vendor ID is missing." });\n            return;\n        }\n        setIsDeleting(true);\n        const result = await deleteVendorAndInventory(vendorId);\n        if (result.success) {\n            toast({ title: "Success", description: result.message });\n            setVendorToDelete(null); // Close dialog\n            fetchVendors(); // Refresh list\n        } else {\n            toast({ variant: "destructive", title: "Error", description: result.error });\n        }\n        setIsDeleting(false);\n    };\n    \n    // Show a loading state while fetching initial data\n    if (isLoading) {\n       return (\n             <div className="container mx-auto py-8 px-4 sm:px-6 lg:px-8">\n                 <Card>\n                    <CardHeader>\n                        <Skeleton className="h-8 w-1/2" />\n                        <Skeleton className="h-4 w-3/4" />\n                    </CardHeader>\n                    <CardContent>\n                        <Skeleton className="h-48 w-full" />\n                    </CardContent>\n                 </Card>\n             </div>\n        );\n    }\n    \n    // If the server returned an error (e.g., auth failure), show an error state.\n    if (error) {\n        return (\n            <div className="container mx-auto py-8 px-4 sm:px-6 lg:px-8 text-center">\n                <Card className="max-w-md mx-auto border-destructive">\n                    <CardHeader>\n                        <CardTitle className="flex items-center justify-center text-destructive">\n                           <UserX className="mr-2 h-6 w-6"/> Access Denied\n                        </CardTitle>\n                        <CardDescription>{error}</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        <p className="text-sm mb-4">\n                            This panel is for administrators only. Please log in with an admin account to continue. If you believe this is an error, contact support.\n                        </p>\n                        <Button asChild variant="secondary">\n                            <Link href="/admin/login">Go to Admin Login</Link>\n                        </Button>\n                    </CardContent>\n                </Card>\n            </div>\n        );\n    }\n\n\n    return (\n        <div className="container mx-auto py-8 px-4 sm:px-6 lg:px-8">\n            <Card>\n                <CardHeader className="flex flex-row items-start sm:items-center justify-between gap-4">\n                    <div>\n                        <CardTitle className="flex items-center"><Shield className="mr-2 h-6 w-6 text-primary" /> Admin Panel - Vendor Management</CardTitle>\n                        <CardDescription>View, edit, or remove vendors from the platform.</CardDescription>\n                    </div>\n                    <div className="flex flex-col sm:flex-row items-end sm:items-center gap-2 flex-shrink-0">\n                         <Button variant="outline" size="sm" asChild>\n                            <Link href="/dashboard"><LayoutDashboard className="mr-2 h-4 w-4"/>Vendor Dashboard</Link>\n                        </Button>\n                        <BulkAddDialog onItemsAdded={() => {\n                            toast({ title: 'Global Items Added', description: 'The global catalog has been updated.' });\n                        }}>\n                            <Button variant="outline" size="sm"><FileUp className="mr-2 h-4 w-4" /> Bulk Add Global Items</Button>\n                        </BulkAddDialog>\n                    </div>\n                </CardHeader>\n                <CardContent>\n                    <Table>\n                        <TableHeader>\n                            <TableRow>\n                                <TableHead>Shop Name</TableHead>\n                                <TableHead>Owner</TableHead>\n                                <TableHead>Email</TableHead>\n                                <TableHead>Category</TableHead>\n                                <TableHead>Status</TableHead>\n                                <TableHead className="text-right">Actions</TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                           {vendors.length > 0 ? (\n                                vendors.map(vendor => (\n                                    <TableRow key={vendor.id}>\n                                        <TableCell className="font-medium">{vendor.shopName}</TableCell>\n                                        <TableCell>{vendor.ownerName}</TableCell>\n                                        <TableCell>{vendor.email}</TableCell>\n                                        <TableCell>{vendor.storeCategory}</TableCell>\n                                        <TableCell>\n                                            <span className={\`px-2 py-1 text-xs font-semibold rounded-full \${vendor.isActiveOnThru ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'}\`}>\n                                                {vendor.isActiveOnThru ? 'Active' : 'Inactive'}\n                                            </span>\n                                        </TableCell>\n                                        <TableCell className="text-right space-x-2">\n                                            <Button variant="outline" size="icon" asChild>\n                                                <Link href={\`/admin/\${vendor.id}/edit\`}>\n                                                    <Edit className="h-4 w-4" />\n                                                </Link>\n                                            </Button>\n                                            <AlertDialog open={vendorToDelete?.id === vendor.id} onOpenChange={(isOpen) => !isOpen && setVendorToDelete(null)}>\n                                                <AlertDialogTrigger asChild>\n                                                    <Button variant="destructive" size="icon" onClick={() => setVendorToDelete(vendor)}>\n                                                        <Trash2 className="h-4 w-4" />\n                                                    </Button>\n                                                </AlertDialogTrigger>\n                                                <AlertDialogContent>\n                                                    <AlertDialogHeader>\n                                                        <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                                                        <AlertDialogDescription>\n                                                            This action cannot be undone. This will permanently delete the vendor\n                                                            <strong className="mx-1">{vendor.shopName}</strong>\n                                                            and all associated inventory items. The user account must be deleted separately.\n                                                        </AlertDialogDescription>\n                                                    </AlertDialogHeader>\n                                                    <AlertDialogFooter>\n                                                        <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>\n                                                        <AlertDialogAction onClick={() => handleDeleteVendor(vendor.id)} disabled={isDeleting}>\n                                                            {isDeleting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}\n                                                            Delete Vendor\n                                                        </AlertDialogAction>\n                                                    </AlertDialogFooter>\n                                                </AlertDialogContent>\n                                            </AlertDialog>\n                                        </TableCell>\n                                    </TableRow>\n                                ))\n                            ) : (\n                                <TableRow>\n                                    <TableCell colSpan={6} className="text-center text-muted-foreground">No vendors found.</TableCell>\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </CardContent>\n            </Card>\n        </div>\n    );\n}`
  },
  {
    path: "src/app/(app)/inventory/actions.ts",
    content: `'use server';\n\nimport { collection, query, where, getDocs, addDoc, doc, updateDoc, getDoc, DocumentReference, Timestamp, deleteDoc, orderBy, writeBatch } from 'firebase/firestore';\nimport type { GlobalItem, VendorInventoryItem } from '@/lib/inventoryModels';\nimport { extractMenuData, type ExtractMenuInput, type ExtractMenuOutput } from '@/ai/flows/extract-menu-flow';\nimport { processCsvData, type ProcessCsvInput, type ProcessCsvOutput } from '@/ai/flows/process-csv-flow';\nimport { z } from 'zod';\nimport { getSession } from '@/lib/auth';\nimport { revalidatePath } from 'next/cache';\nimport { db, storage } from '@/lib/firebase-admin-client';\nimport { ref as storageRef, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\nimport Papa from 'papaparse';\n\n// Ensure vendorId is typically the Firebase Auth UID used as doc ID in 'vendors' collection\n// Ensure globalItemId is the Firestore document ID from 'global_items'\n\n/**\n * Fetches global items based on their shared type (e.g., "grocery", "medical").\n */\nexport async function getGlobalItemsByType(itemType: GlobalItem['sharedItemType']): Promise<GlobalItem[]> {\n  console.log(\`[getGlobalItemsByType] Fetching global items for type: \${itemType}\`);\n  if (!itemType) return [];\n\n  try {\n    const q = query(\n      collection(db, "global_items"),\n      where("sharedItemType", "==", itemType),\n      orderBy("itemName", "asc")\n    );\n    const querySnapshot = await getDocs(q);\n    const items = querySnapshot.docs.map(docSnap => {\n      const data = docSnap.data();\n      return {\n        id: docSnap.id,\n        ...data,\n        createdAt: data.createdAt instanceof Timestamp ? data.createdAt.toDate().toISOString() : data.createdAt,\n        updatedAt: data.updatedAt instanceof Timestamp ? data.updatedAt.toDate().toISOString() : data.updatedAt,\n      } as GlobalItem;\n    });\n     console.log(\`[getGlobalItemsByType] Found \${items.length} global items for type '\${itemType}'\`);\n    return items;\n  } catch (error) {\n     console.error(\`[getGlobalItemsByType] Firestore error fetching global items for type \${itemType}:\`, error);\n     if (error instanceof Error && (error.message.includes("indexes") || error.message.includes("requires an index"))) {\n         console.error("[getGlobalItemsByType] Firestore index missing for 'global_items'. Please create a composite index in your Firebase console for the 'global_items' collection on (sharedItemType ASC, itemName ASC).");\n         throw new Error("Database setup error: Missing index for global items. Please contact support or check Firebase console.");\n     }\n     throw new Error(\`Failed to fetch global items. Database error: \${(error as Error).message}\`);\n  }\n}\n\n\n/**\n * Fetches a specific vendor's inventory items from their subcollection.\n */\nexport async function getVendorInventory(vendorId: string): Promise<VendorInventoryItem[]> {\n  if (!vendorId || typeof vendorId !== 'string' || vendorId.trim() === '') {\n    console.error("[getVendorInventory] Error: vendorId is undefined, empty, or not a string.");\n    throw new Error("Vendor ID is missing or invalid. Cannot fetch inventory.");\n  }\n\n  console.log(\`[getVendorInventory] Constructing query for vendorId: '\${vendorId}'\`);\n\n  try {\n    const inventoryCollectionRef = collection(db, "vendors", vendorId, "inventory");\n    const q = query(\n      inventoryCollectionRef,\n      orderBy("itemName", "asc")\n    );\n    const querySnapshot = await getDocs(q);\n    const inventoryItems = querySnapshot.docs.map(docSnap => {\n      const data = docSnap.data();\n      return {\n        id: docSnap.id,\n        ...data,\n        createdAt: data.createdAt instanceof Timestamp ? data.createdAt.toDate().toISOString() : (typeof data.createdAt === 'string' ? data.createdAt : new Date().toISOString()),\n        updatedAt: data.updatedAt instanceof Timestamp ? data.updatedAt.toDate().toISOString() : (typeof data.updatedAt === 'string' ? data.updatedAt : new Date().toISOString()),\n        lastStockUpdate: data.lastStockUpdate instanceof Timestamp ? data.lastStockUpdate.toDate().toISOString() : (typeof data.lastStockUpdate === 'string' ? data.lastStockUpdate : new Date().toISOString()),\n      } as VendorInventoryItem;\n    });\n    console.log(\`[getVendorInventory] Found \${inventoryItems.length} items for vendor \${vendorId}\`);\n    return inventoryItems;\n  } catch (error) {\n    console.error(\`[getVendorInventory] Firestore error fetching inventory for vendor \${vendorId}:\`, error);\n    // Simple order by on a subcollection does not require a composite index, so the specific error check is removed.\n    throw new Error(\`Failed to fetch vendor inventory. Database error: \${(error as Error).message}\`);\n  }\n}\n\n\nconst AddCustomItemSchema = z.object({\n  itemName: z.string().min(1, "Item name cannot be empty."),\n  vendorItemCategory: z.string().min(1, "Category cannot be empty."),\n  price: z.preprocess(\n    (val) => parseFloat(String(val)),\n    z.number().min(0, "Price must be a positive number.")\n  ),\n  mrp: z.preprocess(\n    (val) => val ? parseFloat(String(val)) : undefined,\n    z.number().min(0, "MRP must be a positive number.").optional()\n  ),\n  stockQuantity: z.preprocess(\n    (val) => parseInt(String(val), 10),\n    z.number().int().min(0, "Stock must be a non-negative integer.")\n  ),\n  unit: z.string().min(1, "Unit (e.g., 'piece', 'kg', 'serving') cannot be empty."),\n  description: z.string().optional(),\n}).refine(data => !data.mrp || data.price <= data.mrp, {\n    message: "Price cannot be higher than MRP.",\n    path: ["price"],\n});\n\nexport type AddCustomItemFormState = {\n  success?: boolean;\n  error?: string;\n  message?: string;\n  fields?: Record<string, string[]>;\n};\n\n/**\n * Adds a new custom item to a vendor's inventory subcollection.\n */\nexport async function addCustomVendorItem(\n  prevState: AddCustomItemFormState,\n  formData: FormData\n): Promise<AddCustomItemFormState> {\n  const session = await getSession();\n  if (!session?.uid) {\n    return { error: 'Authentication required.' };\n  }\n  const vendorId = session.uid;\n\n  const validatedFields = AddCustomItemSchema.safeParse(Object.fromEntries(formData.entries()));\n\n  if (!validatedFields.success) {\n    return {\n      error: "Invalid data submitted.",\n      fields: validatedFields.error.flatten().fieldErrors,\n    };\n  }\n\n  const { ...itemData } = validatedFields.data;\n  \n  const newItemData: Omit<VendorInventoryItem, 'id'> = {\n    vendorId,\n    isCustomItem: true,\n    itemName: itemData.itemName,\n    vendorItemCategory: itemData.vendorItemCategory,\n    stockQuantity: itemData.stockQuantity,\n    price: itemData.price,\n    mrp: itemData.mrp,\n    unit: itemData.unit,\n    description: itemData.description,\n    isAvailableOnThru: true,\n    imageUrl: \`https://placehold.co/50x50.png?text=\${encodeURIComponent(itemData.itemName.substring(0,10))}\`,\n    createdAt: Timestamp.now(),\n    updatedAt: Timestamp.now(),\n    lastStockUpdate: Timestamp.now(),\n  };\n  \n  try {\n    const inventoryCollectionRef = collection(db, 'vendors', vendorId, 'inventory');\n    await addDoc(inventoryCollectionRef, newItemData);\n    \n    revalidatePath('/inventory');\n    return { success: true, message: \`\${itemData.itemName} added successfully.\` };\n  } catch (error) {\n    console.error(\`[addCustomVendorItem] Error adding custom item for vendor \${vendorId}:\`, error);\n    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";\n    return { success: false, error: \`Failed to add item. \${errorMessage}\` };\n  }\n}\n\n\nconst LinkGlobalItemSchema = z.object({\n  globalItemId: z.string().min(1, "Global Item ID is required."),\n  price: z.preprocess(\n    (val) => parseFloat(String(val)),\n    z.number().min(0, "Price must be a positive number.")\n  ),\n  stockQuantity: z.preprocess(\n    (val) => parseInt(String(val), 10),\n    z.number().int().min(0, "Stock must be a non-negative integer.")\n  ),\n  mrp: z.preprocess(\n    (val) => val ? parseFloat(String(val)) : undefined,\n    z.number().optional()\n  ),\n}).refine(data => !data.mrp || data.price <= data.mrp, {\n    message: "Price cannot be higher than MRP.",\n    path: ["price"],\n});\n\nexport type LinkGlobalItemFormState = {\n  success?: boolean;\n  error?: string;\n  message?: string;\n  fields?: Record<string, string[]>;\n};\n\n/**\n * Links a global item to a vendor's inventory, creating a new entry in their inventory subcollection.\n */\nexport async function linkGlobalItemToVendorInventory(\n  prevState: LinkGlobalItemFormState,\n  formData: FormData\n): Promise<LinkGlobalItemFormState> {\n  const session = await getSession();\n  const vendorId = session?.uid;\n  if (!vendorId) {\n    return { error: 'Authentication required.' };\n  }\n\n  const validatedFields = LinkGlobalItemSchema.safeParse(Object.fromEntries(formData.entries()));\n\n  if (!validatedFields.success) {\n    console.error("[linkGlobalItemToVendorInventory] Validation failed:", validatedFields.error.flatten().fieldErrors);\n    return { error: "Invalid data submitted.", fields: validatedFields.error.flatten().fieldErrors, };\n  }\n\n  const { globalItemId, price, stockQuantity } = validatedFields.data;\n  console.log(\`[linkGlobalItemToVendorInventory] Linking global item \${globalItemId} for vendor \${vendorId} with stock \${stockQuantity}, price \${price}\`);\n\n  try {\n    const globalItemRef = doc(db, 'global_items', globalItemId);\n    const globalItemSnap = await getDoc(globalItemRef);\n\n    if (!globalItemSnap.exists()) {\n      return { success: false, error: 'Global item not found.' };\n    }\n    const globalItemData = globalItemSnap.data() as GlobalItem;\n\n    const newItemData: Omit<VendorInventoryItem, 'id'> = {\n      vendorId, // Keep for denormalization and easier client-side access\n      globalItemRef,\n      isCustomItem: false,\n      itemName: globalItemData.itemName,\n      vendorItemCategory: globalItemData.defaultCategory,\n      stockQuantity,\n      price,\n      mrp: globalItemData.mrp, // Carry over MRP from global item\n      unit: globalItemData.defaultUnit,\n      isAvailableOnThru: true,\n      imageUrl: globalItemData.defaultImageUrl || \`https://placehold.co/50x50.png?text=\${globalItemData.itemName.substring(0,10)}\`,\n      createdAt: Timestamp.now(),\n      updatedAt: Timestamp.now(),\n      lastStockUpdate: Timestamp.now(),\n    };\n    \n    const inventoryCollectionRef = collection(db, 'vendors', vendorId, 'inventory');\n    const docRef = await addDoc(inventoryCollectionRef, newItemData);\n    console.log(\`[linkGlobalItemToVendorInventory] Successfully created vendor inventory item \${docRef.id}\`);\n    revalidatePath('/inventory');\n    return { success: true, message: \`\${globalItemData.itemName} added to your inventory.\` };\n  } catch (error) {\n    console.error(\`[linkGlobalItemToVendorInventory] Error linking global item \${globalItemId} for vendor \${vendorId}:\`, error);\n    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";\n    return { success: false, error: \`Failed to link item. \${errorMessage}\` };\n  }\n}\n\n\n/**\n * Updates the stock quantity of a specific item in vendor's inventory.\n * NOTE: This is a placeholder.\n */\nexport async function updateVendorItemStock(vendorInventoryItemId: string, newStock: number): Promise<{ success: boolean; error?: string }> {\n  console.log(\`Placeholder: Updating stock for item \${vendorInventoryItemId} to \${newStock}\`);\n  return { success: true };\n}\n\n/**\n * Updates the price of a specific item in vendor's inventory.\n * NOTE: This is a placeholder.\n */\nexport async function updateVendorItemPrice(vendorInventoryItemId: string, newPrice: number): Promise<{ success: boolean; error?: string }> {\n  console.log(\`Placeholder: Updating price for item \${vendorInventoryItemId} to \${newPrice}\`);\n  return { success: true };\n}\n\n\nexport type UpdateItemFormState = {\n  success?: boolean;\n  error?: string;\n  message?: string;\n  fields?: Record<string, string[]>; // For field-specific errors\n};\n\n// Schema for updating item details\nconst UpdateVendorItemSchema = z.object({\n  itemId: z.string().min(1, "Item ID is required."),\n  itemName: z.string().min(1, "Item name cannot be empty."),\n  vendorItemCategory: z.string().min(1, "Category cannot be empty."),\n  price: z.preprocess(\n    (val) => parseFloat(String(val)),\n    z.number().min(0, "Price must be a positive number.")\n  ),\n  mrp: z.preprocess(\n    (val) => val ? parseFloat(String(val)) : undefined,\n    z.number().min(0, "MRP must be a positive number.").optional()\n  ),\n  stockQuantity: z.preprocess(\n    (val) => parseInt(String(val), 10),\n    z.number().int().min(0, "Stock must be a non-negative integer.")\n  ),\n  description: z.string().optional(),\n  imageUrl: z.string().url({ message: "Please enter a valid URL for the image." }).or(z.literal('')).optional(),\n}).refine(data => !data.mrp || data.price <= data.mrp, {\n    message: "Price cannot be higher than MRP.",\n    path: ["price"],\n});\n\n\nexport async function updateVendorItemDetails(\n  prevState: UpdateItemFormState,\n  formData: FormData\n): Promise<UpdateItemFormState> {\n  const session = await getSession();\n  if (!session?.uid) {\n    return { error: 'Authentication required.' };\n  }\n  const vendorId = session.uid;\n\n  const rawData = Object.fromEntries(formData.entries());\n  console.log('[updateVendorItemDetails] Received raw form data:', rawData);\n\n  const validatedFields = UpdateVendorItemSchema.safeParse(rawData);\n\n  if (!validatedFields.success) {\n    console.error("[updateVendorItemDetails] Validation error:", validatedFields.error.flatten().fieldErrors);\n    return {\n      error: "Invalid data for updating item. Please check your inputs.",\n      fields: validatedFields.error.flatten().fieldErrors as Record<string, string[]>,\n    };\n  }\n\n  const { itemId, ...updates } = validatedFields.data;\n  \n  const dataToUpdate: Partial<VendorInventoryItem> & { updatedAt: Timestamp } = {\n    ...updates,\n    updatedAt: Timestamp.now(),\n  };\n\n  // Ensure optional fields are not set to undefined if they are empty strings\n  if (dataToUpdate.description === '') dataToUpdate.description = undefined;\n  if (dataToUpdate.imageUrl === '') {\n      dataToUpdate.imageUrl = \`https://placehold.co/50x50.png?text=\${encodeURIComponent(updates.itemName.substring(0,10))}\`;\n  }\n\n\n  try {\n    const itemRef = doc(db, "vendors", vendorId, "inventory", itemId);\n    await updateDoc(itemRef, dataToUpdate as any); // Using 'as any' to bypass strict type check on partial update\n    console.log(\`[updateVendorItemDetails] Successfully updated item \${itemId} for vendor \${vendorId}\`);\n    revalidatePath('/inventory');\n    return { success: true, message: "Item details updated successfully." };\n  } catch (error) {\n    console.error(\`[updateVendorItemDetails] Error updating item \${itemId}:\`, error);\n    const errorMessage = error instanceof Error ? error.message : "Unknown error during update.";\n    return { success: false, error: \`Failed to update item. \${errorMessage}\` };\n  }\n}\n\n\nexport type DeleteItemFormState = {\n  success?: boolean;\n  error?: string;\n  message?: string;\n};\n/**\n * Deletes an item from a vendor's inventory subcollection.\n */\nexport async function deleteVendorItem(prevState: DeleteItemFormState, formData: FormData): Promise<DeleteItemFormState> {\n    const session = await getSession();\n    if (!session?.uid) {\n        return { success: false, error: "Authentication required." };\n    }\n    const vendorId = session.uid;\n\n    const vendorInventoryItemId = formData.get('itemId') as string;\n    console.log(\`[deleteVendorItem] Attempting to delete item \${vendorInventoryItemId} for vendor \${vendorId}\`);\n    if (!vendorInventoryItemId) {\n        console.error("[deleteVendorItem] Item ID is missing for deletion.");\n        return { success: false, error: "Item ID is missing for deletion." };\n    }\n    try {\n        const itemRef = doc(db, "vendors", vendorId, "inventory", vendorInventoryItemId);\n        await deleteDoc(itemRef);\n        console.log(\`[deleteVendorItem] Successfully deleted item \${vendorInventoryItemId}\`);\n        revalidatePath('/inventory');\n        return { success: true, message: "Item deleted successfully." };\n    } catch (error) {\n        console.error(\`[deleteVendorItem] Error deleting item \${vendorInventoryItemId}:\`, error);\n        const errorMessage = error instanceof Error ? error.message : "Unknown error during deletion.";\n        return { success: false, error: \`Failed to delete item. \${errorMessage}\` };\n    }\n}\n\n// --- Admin Actions for Global Items (Placeholders for Admin UI) ---\n\nexport async function addGlobalItem(itemData: Omit<GlobalItem, 'id' | 'createdAt' | 'updatedAt'>): Promise<{ success: boolean; itemId?: string; error?: string }> {\n  console.log("Placeholder for Admin UI: Adding global item:", itemData);\n  return { success: true, itemId: "mock_global_item_id" };\n}\n\nexport async function updateGlobalItem(itemId: string, updates: Partial<GlobalItem>): Promise<{ success: boolean; error?: string }> {\n  console.log("Placeholder for Admin UI: Updating global item:", itemId, updates);\n  return { success: true };\n}\n\nexport async function deleteGlobalItem(itemId: string): Promise<{ success: boolean; error?: string }> {\n  console.log("Placeholder for Admin UI: Deleting global item:", itemId);\n  return { success: true };\n}\n\n\n// --- AI Menu Extraction ---\nconst MenuPdfUploadSchema = z.object({\n  menuDataUri: z.string().startsWith('data:application/pdf;base64,', { message: "Invalid PDF data URI." }),\n  vendorId: z.string().min(1, { message: "Vendor ID is required." }),\n});\n\nexport type MenuUploadFormState = {\n  extractedMenu?: ExtractMenuOutput;\n  error?: string;\n  message?: string;\n};\n\nexport async function handleMenuPdfUpload(\n  prevState: MenuUploadFormState,\n  formData: FormData\n): Promise<MenuUploadFormState> {\n  console.log("[handleMenuPdfUpload] Server action started.");\n  const session = await getSession();\n  const vendorId = session?.uid;\n\n  if (!vendorId) {\n    return { error: 'You must be logged in to upload a menu.' };\n  }\n\n  const menuFile = formData.get('menuPdf') as File;\n  console.log("[handleMenuPdfUpload] Received menuFile:", menuFile?.name, "vendorId:", vendorId);\n\n  if (!menuFile || menuFile.size === 0) {\n    console.warn("[handleMenuPdfUpload] No PDF file uploaded or file is empty.");\n    return { error: 'No PDF file uploaded or file is empty.' };\n  }\n  if (menuFile.type !== 'application/pdf') {\n    console.warn("[handleMenuPdfUpload] Uploaded file is not a PDF. Type:", menuFile.type);\n    return { error: 'Uploaded file is not a PDF.' };\n  }\n\n  let menuDataUri = '';\n  try {\n    const arrayBuffer = await menuFile.arrayBuffer();\n    const base64String = Buffer.from(arrayBuffer).toString('base64');\n    menuDataUri = \`data:application/pdf;base64,\${base64String}\`;\n    console.log("[handleMenuPdfUpload] PDF converted to data URI (first 100 chars):", menuDataUri.substring(0,100));\n  } catch (conversionError) {\n    console.error("[handleMenuPdfUpload] Error converting PDF to data URI:", conversionError);\n    return { error: 'Failed to process PDF file content.' };\n  }\n\n  const validatedFields = MenuPdfUploadSchema.safeParse({ menuDataUri, vendorId });\n  console.log("[handleMenuPdfUpload] Zod validation result:", validatedFields);\n\n  if (!validatedFields.success) {\n    console.error("[handleMenuPdfUpload] Validation error for menu PDF upload:", validatedFields.error.flatten().fieldErrors);\n    return {\n      error: 'Invalid data for menu PDF processing. ' + (validatedFields.error.flatten().fieldErrors.menuDataUri?.[0] || validatedFields.error.flatten().fieldErrors.vendorId?.[0] || 'Unknown validation error.'),\n    };\n  }\n\n  const inputData: ExtractMenuInput = validatedFields.data;\n  console.log("[handleMenuPdfUpload] Input data for Genkit flow:", { vendorId: inputData.vendorId, menuDataUriLength: inputData.menuDataUri.length });\n\n  try {\n    console.log("[handleMenuPdfUpload] Calling Genkit extractMenuData flow...");\n    const result = await extractMenuData(inputData);\n    console.log("[handleMenuPdfUpload] Genkit flow successful, result (first 500 chars of rawText if present):",\n        result ? {\n            extractedItemsCount: result.extractedItems?.length,\n            rawTextSample: result.rawText?.substring(0,500)\n        } : "No result from Genkit flow."\n    );\n\n    if (!result || !result.extractedItems) {\n        console.warn("[handleMenuPdfUpload] Genkit flow returned no or malformed result. Full result:", JSON.stringify(result, null, 2));\n        const rawTextInfo = result?.rawText ? \`Raw text was extracted: \${result.rawText.substring(0, 200)}...\` : "No raw text extracted.";\n        return {\n            error: 'AI menu extraction returned an unexpected result. No structured items found. ' + rawTextInfo,\n            extractedMenu: result ? { extractedItems: [], rawText: result.rawText } : { extractedItems: [] }\n        };\n    }\n\n    return { extractedMenu: result, message: \`Menu processed. \${result.extractedItems.length} items found.\` };\n  } catch (error) {\n    console.error('[handleMenuPdfUpload] Error in handleMenuPdfUpload processing with AI:', error);\n    let errorMessage = 'Failed to process menu PDF with AI. Please try again.';\n    if (error instanceof Error) {\n        errorMessage = \`AI processing error: \${error.message}\`;\n    }\n\n    if (errorMessage.includes('deadline') || errorMessage.includes('timeout') || errorMessage.includes('504')) {\n        errorMessage = 'The AI processing took too long and timed out. Try a smaller or simpler PDF, or check the AI service status.';\n    }\n    return { error: errorMessage };\n  }\n}\n\n// --- Remove Duplicate Items ---\nexport type RemoveDuplicatesFormState = {\n    success?: boolean;\n    error?: string;\n    message?: string;\n    duplicatesRemoved?: number;\n};\n\nexport async function handleRemoveDuplicateItems(\n    prevState: RemoveDuplicatesFormState,\n    formData: FormData\n): Promise<RemoveDuplicatesFormState> {\n    const session = await getSession();\n    const vendorId = session?.uid;\n    console.log(\`[handleRemoveDuplicateItems] Starting for vendor: \${vendorId}\`);\n\n    if (!vendorId) {\n        console.error("[handleRemoveDuplicateItems] Vendor ID is missing.");\n        return { error: "Vendor ID is missing." };\n    }\n\n    try {\n        const inventoryItems = await getVendorInventory(vendorId);\n        if (inventoryItems.length === 0) {\n            return { success: true, message: "Inventory is empty. No duplicates to remove.", duplicatesRemoved: 0 };\n        }\n\n        const seenItems = new Map<string, string>(); // Key: "itemNameLowerCase-categoryLowerCase", Value: itemIdToKeep\n        const duplicateIdsToDelete: string[] = [];\n\n        for (const item of inventoryItems) {\n            if (!item.id || !item.itemName || !item.vendorItemCategory) { // Ensure necessary fields exist\n                console.warn(\`[handleRemoveDuplicateItems] Skipping item due to missing id, itemName, or category: \${JSON.stringify(item)}\`);\n                continue;\n            }\n            const itemKey = \`\${item.itemName.toLowerCase().trim()}-\${item.vendorItemCategory.toLowerCase().trim()}\`;\n\n            if (seenItems.has(itemKey)) {\n                // This is a duplicate\n                duplicateIdsToDelete.push(item.id);\n            } else {\n                // First time seeing this item, mark it to be kept\n                seenItems.set(itemKey, item.id);\n            }\n        }\n\n        if (duplicateIdsToDelete.length === 0) {\n            return { success: true, message: "No duplicate items found.", duplicatesRemoved: 0 };\n        }\n\n        console.log(\`[handleRemoveDuplicateItems] Found \${duplicateIdsToDelete.length} duplicates to delete for vendor \${vendorId}. IDs:\`, duplicateIdsToDelete);\n\n        const deletePromises = duplicateIdsToDelete.map(id => deleteDoc(doc(db, "vendors", vendorId, "inventory", id)));\n        await Promise.all(deletePromises);\n\n        console.log(\`[handleRemoveDuplicateItems] Successfully deleted \${duplicateIdsToDelete.length} duplicate items for vendor \${vendorId}.\`);\n        revalidatePath('/inventory');\n        return {\n            success: true,\n            message: \`Successfully removed \${duplicateIdsToDelete.length} duplicate items.\`,\n            duplicatesRemoved: duplicateIdsToDelete.length\n        };\n\n    } catch (error) {\n        console.error(\`[handleRemoveDuplicateItems] Error removing duplicates for vendor \${vendorId}:\`, error);\n        const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";\n        return { error: \`Failed to remove duplicate items. \${errorMessage}\` };\n    }\n}\n\n// --- Delete Selected Items ---\nconst DeleteSelectedItemsSchema = z.object({\n  selectedItemIdsJson: z.string().refine(\n    (val) => {\n      try {\n        const parsed = JSON.parse(val);\n        return Array.isArray(parsed) && parsed.every(id => typeof id === 'string');\n      } catch (e) {\n        return false;\n      }\n    },\n    { message: 'Selected item IDs must be a valid JSON array of strings.' }\n  ),\n});\n\nexport type DeleteSelectedItemsFormState = {\n  success?: boolean;\n  error?: string;\n  message?: string;\n  itemsDeleted?: number;\n};\n\nexport async function handleDeleteSelectedItems(\n  prevState: DeleteSelectedItemsFormState,\n  formData: FormData\n): Promise<DeleteSelectedItemsFormState> {\n  console.log('[handleDeleteSelectedItems] Server action started.');\n  const session = await getSession();\n  if (!session?.uid) {\n    return { error: 'Authentication required.' };\n  }\n  const vendorId = session.uid;\n\n  const rawFormData = {\n    selectedItemIdsJson: formData.get('selectedItemIdsJson') as string,\n  };\n  console.log('[handleDeleteSelectedItems] Raw form data:', rawFormData);\n\n  const validatedFields = DeleteSelectedItemsSchema.safeParse(rawFormData);\n\n  if (!validatedFields.success) {\n    console.error("[handleDeleteSelectedItems] Validation error:", validatedFields.error.flatten().fieldErrors);\n    return {\n      error: 'Invalid data for deleting items. ' + (validatedFields.error.flatten().fieldErrors.selectedItemIdsJson?.[0] || 'Unknown validation error.'),\n    };\n  }\n\n  const { selectedItemIdsJson } = validatedFields.data;\n  let itemIdsToDelete: string[];\n  try {\n    itemIdsToDelete = JSON.parse(selectedItemIdsJson);\n    console.log(\`[handleDeleteSelectedItems] Parsed \${itemIdsToDelete.length} item IDs to delete.\`);\n  } catch (e) {\n    console.error("[handleDeleteSelectedItems] Error parsing selectedItemIds JSON:", e);\n    return { error: 'Failed to parse selected item IDs.' };\n  }\n\n  if (!Array.isArray(itemIdsToDelete) || itemIdsToDelete.length === 0) {\n    return { error: 'No item IDs provided for deletion or format is incorrect.', itemsDeleted: 0 };\n  }\n\n  try {\n    const batch = writeBatch(db);\n    itemIdsToDelete.forEach(itemId => {\n      if (itemId && typeof itemId === 'string') {\n        const itemRef = doc(db, 'vendors', vendorId, 'inventory', itemId);\n        batch.delete(itemRef);\n      } else {\n         console.warn(\`[handleDeleteSelectedItems] Invalid item ID found in batch: \${itemId}\`);\n      }\n    });\n\n    await batch.commit();\n    console.log(\`[handleDeleteSelectedItems] Successfully deleted \${itemIdsToDelete.length} items from Firestore.\`);\n    revalidatePath('/inventory');\n    return {\n        success: true,\n        message: \`\${itemIdsToDelete.length} item(s) deleted successfully.\`,\n        itemsDeleted: itemIdsToDelete.length\n    };\n\n  } catch (error) {\n    console.error('[handleDeleteSelectedItems] Error deleting items from Firestore:', error);\n    let errorMessage = 'Failed to delete selected items from the database.';\n    if (error instanceof Error && error.message) {\n      errorMessage = \`Firestore error: \${error.message}\`;\n    }\n    return { error: errorMessage };\n  }\n}\n\n\n// --- AI Bulk Add Global Items ---\n\nconst ParsedItemSchema = z.object({\n  itemName: z.string().describe("The name of the product."),\n  sharedItemType: z.enum(['grocery', 'medical', 'liquor', 'other']).describe("The high-level type of the item."),\n  defaultCategory: z.string().describe("A specific category for the item."),\n  defaultUnit: z.string().describe("The unit of measurement or sale."),\n  brand: z.string().optional().describe("The brand name of the product."),\n  mrp: z.number().optional().describe("The Maximum Retail Price."),\n  price: z.number().optional().describe("The actual selling price."),\n  defaultImageUrl: z.string().url().optional().describe("A URL for the product's image."),\n  description: z.string().optional().describe("A brief description of the product."),\n  barcode: z.string().optional().describe("The barcode or UPC of the product."),\n});\n\n\nexport type CsvParseFormState = {\n  parsedItems?: z.infer<typeof ParsedItemSchema>[];\n  error?: string;\n  message?: string;\n};\n\n\nexport async function handleCsvUpload(\n  prevState: CsvParseFormState,\n  formData: FormData\n): Promise<CsvParseFormState> {\n  console.log('DEBUG: [handleCsvUpload] ----------------- ACTION STARTED -----------------');\n  const csvFile = formData.get('csvFile') as File;\n\n  if (!csvFile || csvFile.size === 0) {\n    console.error('DEBUG: [handleCsvUpload] No CSV file found or file is empty.');\n    return { error: "CSV file is required." };\n  }\n  \n  try {\n    const csvData = await csvFile.text();\n    const parseResult = Papa.parse<Record<string, string>>(csvData, { header: true, skipEmptyLines: true });\n    \n    if (parseResult.errors.length > 0) {\n        console.error('DEBUG: [handleCsvUpload] PapaParse errors:', parseResult.errors);\n        return { error: \`Failed to parse CSV file: \${parseResult.errors[0].message}\` };\n    }\n    \n    const headers = parseResult.meta.fields;\n    if (!headers || headers.length === 0) {\n        return { error: 'CSV file appears to be empty or missing headers. Please check the file for empty lines before the header row.' };\n    }\n    const csvSample = headers.join(',');\n    \n    console.log(\`DEBUG: [handleCsvUpload] Sending headers to AI for mapping: \${csvSample}\`);\n    \n    let mappings;\n    try {\n        const mappingResult = await processCsvData({ csvSample });\n        mappings = mappingResult.mappings;\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : "An unknown error occurred during AI mapping.";\n        console.error('DEBUG: [handleCsvUpload] AI mapping failed:', errorMessage);\n        return { error: \`AI mapping failed: \${errorMessage}\` };\n    }\n    \n    if (!mappings) {\n        console.error('DEBUG: [handleCsvUpload] AI failed to return mappings.');\n        return { error: 'The AI could not determine column mappings from your CSV headers. Please ensure they are clear (e.g., "Name", "Price").' };\n    }\n    console.log('DEBUG: [handleCsvUpload] AI returned mappings:', mappings);\n\n    // Apply mappings to the full dataset\n    const processedItems = parseResult.data.map(row => {\n        const getNum = (colName: string | undefined) => {\n             if (!colName || !row[colName]) return undefined;\n             const cleaned = String(row[colName]).replace(/[^0-9.-]+/g, "");\n             const num = parseFloat(cleaned);\n             return isNaN(num) ? undefined : num;\n        };\n        const getString = (colName: string | undefined) => colName ? row[colName] : undefined;\n\n        const category = getString(mappings.sharedItemType);\n\n        return {\n            itemName: getString(mappings.itemName) || 'Unnamed Item',\n            sharedItemType: (category && category.toLowerCase().includes('grocery')) ? 'grocery' : 'other',\n            defaultCategory: getString(mappings.defaultCategory) || 'Uncategorized',\n            defaultUnit: getString(mappings.defaultUnit) || 'unit',\n            brand: getString(mappings.brand),\n            mrp: getNum(mappings.mrp),\n            price: getNum(mappings.price),\n            description: getString(mappings.description),\n            barcode: getString(mappings.barcode),\n        } as z.infer<typeof ParsedItemSchema>;\n    }).filter(item => item.itemName !== 'Unnamed Item');\n\n    console.log(\`DEBUG: [handleCsvUpload] Successfully processed \${processedItems.length} items.\`);\n    return { parsedItems: processedItems, message: \`Successfully parsed \${processedItems.length} items for preview.\` };\n\n  } catch(error) {\n    console.error('DEBUG: [handleCsvUpload] CRITICAL ERROR during processing:', error);\n    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred during processing.";\n    return { error: errorMessage };\n  }\n}\n\nexport type BulkSaveFormState = {\n    success?: boolean;\n    error?: string;\n    message?: string;\n    itemsAdded?: number;\n};\n\nexport async function handleBulkSaveItems(\n    prevState: BulkSaveFormState,\n    formData: FormData\n): Promise<BulkSaveFormState> {\n    console.log('DEBUG: handleBulkSaveItems server action started.');\n    const session = await getSession();\n    // Temporarily disable admin check for direct access\n    // if (session?.role !== 'admin') {\n    //     console.error('DEBUG: handleBulkSaveItems - Authorization failed. User is not an admin.');\n    //     return { error: "You are not authorized to perform this action." };\n    // }\n    console.log('DEBUG: handleBulkSaveItems - Admin check bypassed.');\n\n    const itemsJson = formData.get('itemsJson') as string;\n    if (!itemsJson) {\n        console.error('DEBUG: handleBulkSaveItems - No itemsJson found in form data.');\n        return { error: "No items to save." };\n    }\n    console.log(\`DEBUG: handleBulkSaveItems - Received itemsJson with length: \${itemsJson.length}\`);\n\n    let itemsToSave: Omit<GlobalItem, 'id'>[];\n    try {\n        itemsToSave = JSON.parse(itemsJson);\n        console.log(\`DEBUG: handleBulkSaveItems - Successfully parsed \${itemsToSave.length} items from JSON.\`);\n    } catch(e) {\n        console.error('DEBUG: handleBulkSaveItems - Failed to parse itemsJson.', e);\n        return { error: "Invalid items format." };\n    }\n\n    if (!Array.isArray(itemsToSave) || itemsToSave.length === 0) {\n        console.error('DEBUG: handleBulkSaveItems - itemsToSave is not an array or is empty.');\n        return { error: "No items to save." };\n    }\n\n    try {\n        const batch = writeBatch(db);\n        const now = Timestamp.now();\n        console.log(\`DEBUG: handleBulkSaveItems - Preparing batch write for \${itemsToSave.length} items.\`);\n\n        itemsToSave.forEach((item, index) => {\n            const newItemRef = doc(collection(db, 'global_items'));\n            const newItemData: Omit<GlobalItem, 'id'> = {\n                ...item,\n                createdAt: now,\n                updatedAt: now,\n            };\n            batch.set(newItemRef, newItemData);\n            if (index < 5) { // Log first few items to be saved\n                 console.log(\`DEBUG: Staging item \${index + 1}:\`, JSON.stringify(newItemData));\n            }\n        });\n\n        await batch.commit();\n        console.log(\`DEBUG: handleBulkSaveItems - Batch commit successful.\`);\n\n        return { success: true, message: \`Successfully added \${itemsToSave.length} items to the global catalog.\`, itemsAdded: itemsToSave.length };\n    } catch (error) {\n        console.error('DEBUG: handleBulkSaveItems - CRITICAL ERROR saving items to Firestore:', error);\n        const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";\n        return { error: \`Failed to save items. \${errorMessage}\` };\n    }\n}`
  },
  {
    path: "src/app/(app)/inventory/page.tsx",
    content: `'use client';\n\nimport { useEffect, useState, useActionState, useMemo, useRef } from 'react';\nimport { useFormStatus } from 'react-dom';\nimport Image from 'next/image';\nimport { Button } from "@/components/ui/button";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";\nimport { Input } from "@/components/ui/input";\nimport { Label } from "@/components/ui/label";\nimport { Textarea } from '@/components/ui/textarea';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";\nimport { Checkbox } from "@/components/ui/checkbox";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose, DialogTrigger } from "@/components/ui/dialog";\nimport { PlusCircle, Search, BookOpen, Package, ShoppingBasket, ListPlus, Edit3, Trash2, UploadCloud, Loader2, AlertTriangle, Save, RefreshCw, Sparkles, Filter, Upload, Globe, X, FileUp, Info } from "lucide-react";\nimport { getSession } from '@/lib/auth';\nimport type { Vendor, VendorInventoryItem, GlobalItem } from '@/lib/inventoryModels';\nimport type { ExtractMenuOutput } from '@/ai/flows/extract-menu-flow';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useFirebaseAuth } from '@/components/auth/FirebaseAuthProvider';\nimport { collection, writeBatch, doc, Timestamp } from 'firebase/firestore';\n\nimport {\n    handleMenuPdfUpload, type MenuUploadFormState,\n    getVendorInventory,\n    deleteVendorItem, type DeleteItemFormState,\n    handleRemoveDuplicateItems, type RemoveDuplicatesFormState,\n    handleDeleteSelectedItems, type DeleteSelectedItemsFormState,\n    updateVendorItemDetails, type UpdateItemFormState,\n    getGlobalItemsByType,\n    linkGlobalItemToVendorInventory, type LinkGlobalItemFormState,\n    addCustomVendorItem, type AddCustomItemFormState,\n} from './actions';\nimport { useToast } from '@/hooks/use-toast';\nimport { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from "@/components/ui/alert-dialog";\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from '@/components/ui/form';\nimport { ref as storageRef, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\nimport { Progress } from '@/components/ui/progress';\nimport { BulkAddDialog } from '@/components/inventory/BulkAddDialog';\n\n\ninterface VendorSession extends Pick<Vendor, 'email' | 'shopName' | 'storeCategory'> {\n  isAuthenticated: boolean;\n  uid?: string;\n}\n\nconst initialMenuUploadState: MenuUploadFormState = {};\nconst initialDeleteItemState: DeleteItemFormState = {};\nconst initialRemoveDuplicatesState: RemoveDuplicatesFormState = {};\nconst initialDeleteSelectedItemsState: DeleteSelectedItemsFormState = {};\nconst initialUpdateItemState: UpdateItemFormState = {};\nconst initialLinkGlobalItemState: LinkGlobalItemFormState = {};\nconst initialAddCustomItemState: AddCustomItemFormState = {};\n\n\nconst EditItemFormSchema = z.object({\n  itemName: z.string().min(1, "Item name cannot be empty."),\n  vendorItemCategory: z.string().min(1, "Category cannot be empty."),\n  price: z.preprocess(\n    (val) => parseFloat(String(val)),\n    z.number({invalid_type_error: "Price must be a number."}).min(0, "Price must be a positive number.")\n  ),\n  mrp: z.preprocess(\n    (val) => val ? parseFloat(String(val)) : undefined,\n    z.number().min(0, "MRP must be a positive number.").optional()\n  ),\n  stockQuantity: z.preprocess(\n    (val) => parseInt(String(val), 10),\n    z.number({invalid_type_error: "Stock must be an integer."}).int().min(0, "Stock must be a non-negative integer.")\n  ),\n  description: z.string().optional(),\n  imageUrl: z.string().url({ message: "Please enter a valid URL." }).or(z.literal('')).optional(),\n}).refine(data => !data.mrp || data.price <= data.mrp, {\n    message: "Price cannot be higher than MRP.",\n    path: ["price"],\n});\n\n\nfunction MenuUploadSubmitButton() {\n  const { pending } = useFormStatus();\n  return (\n    <Button type="submit" disabled={pending} className="bg-primary hover:bg-primary/90 text-primary-foreground">\n      {pending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <UploadCloud className="mr-2 h-4 w-4" />}\n      Upload & Process Menu\n    </Button>\n  );\n}\n\nfunction SaveMenuButton({ onClick, isSaving }: { onClick: () => void; isSaving: boolean }) {\n  return (\n    <Button onClick={onClick} disabled={isSaving} className="mt-4 bg-green-600 hover:bg-green-700 text-white">\n      {isSaving ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Save className="mr-2 h-4 w-4" />}\n      Confirm & Save Extracted Menu\n    </Button>\n  );\n}\n\nfunction DeleteItemButton() {\n  const { pending } = useFormStatus();\n  return (\n    <AlertDialogAction\n      type="submit"\n      disabled={pending}\n      className="bg-destructive hover:bg-destructive/90 text-destructive-foreground"\n    >\n      {pending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Trash2 className="mr-2 h-4 w-4" />}\n      Delete\n    </AlertDialogAction>\n  );\n}\n\nfunction RemoveDuplicatesButton() {\n    const { pending } = useFormStatus();\n    return (\n        <Button type="submit" variant="outline" size="sm" disabled={pending}>\n            {pending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Sparkles className="mr-2 h-4 w-4" />}\n            Remove Duplicates\n        </Button>\n    );\n}\n\nfunction DeleteSelectedButton() {\n    const { pending } = useFormStatus();\n    return (\n        <AlertDialogAction\n            type="submit"\n            disabled={pending}\n            className="bg-destructive hover:bg-destructive/90 text-destructive-foreground"\n        >\n            {pending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Trash2 className="mr-2 h-4 w-4" />}\n            Delete Selected\n        </AlertDialogAction>\n    );\n}\n\nfunction UpdateItemSubmitButton({ isUploadingFile }: { isUploadingFile: boolean }) {\n    const { pending } = useFormStatus();\n    return (\n        <Button type="submit" disabled={pending || isUploadingFile} className="bg-primary hover:bg-primary/90 text-primary-foreground">\n            {pending || isUploadingFile ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Save className="mr-2 h-4 w-4" />}\n            {isUploadingFile ? 'Uploading...' : (pending ? 'Saving...' : 'Save Changes')}\n        </Button>\n    );\n}\n\ninterface EditItemDialogProps {\n  item: VendorInventoryItem | null;\n  vendorId: string | null;\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n  onItemUpdate: () => void;\n}\n\nfunction EditItemDialog({ item, vendorId, isOpen, onOpenChange, onItemUpdate }: EditItemDialogProps) {\n  const { storage } = useFirebaseAuth();\n  const [updateState, setUpdateState] = useState<UpdateItemFormState>({});\n  const { toast } = useToast();\n  \n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [imagePreviewUrl, setImagePreviewUrl] = useState<string | null>(null);\n  const [uploadProgress, setUploadProgress] = useState<number | null>(null);\n  const [isUploadingFile, setIsUploadingFile] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n\n  const form = useForm<z.infer<typeof EditItemFormSchema>>({\n    resolver: zodResolver(EditItemFormSchema),\n    defaultValues: {\n      itemName: item?.itemName || '',\n      vendorItemCategory: item?.vendorItemCategory || '',\n      price: item?.price || 0,\n      mrp: item?.mrp || undefined,\n      stockQuantity: item?.stockQuantity || 0,\n      description: item?.description || '',\n      imageUrl: item?.imageUrl || '',\n    }\n  });\n\n  useEffect(() => {\n    if (item && isOpen) {\n      form.reset({\n        itemName: item.itemName || '',\n        vendorItemCategory: item.vendorItemCategory || '',\n        price: item.price || 0,\n        mrp: item.mrp || undefined,\n        stockQuantity: item.stockQuantity || 0,\n        description: item.description || '',\n        imageUrl: item.imageUrl || '',\n      });\n      setImagePreviewUrl(item.imageUrl || null);\n      setSelectedFile(null);\n      setUploadProgress(null);\n      setIsUploadingFile(false);\n      setIsSubmitting(false);\n    }\n  }, [item, form, isOpen]); // Reset when dialog opens with a new item or is re-opened\n\n  useEffect(() => {\n    if (updateState?.success) {\n      toast({ title: "Item Updated", description: updateState.message });\n      onItemUpdate();\n      onOpenChange(false);\n    }\n    if (updateState?.error) {\n      toast({ variant: "destructive", title: "Update Failed", description: updateState.error });\n    }\n  }, [updateState, toast, onOpenChange, onItemUpdate]);\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n      setImagePreviewUrl(URL.createObjectURL(file));\n      form.setValue('imageUrl', ''); // Clear any pasted URL if a file is chosen\n    }\n  };\n\n  const currentImageUrlForDisplay = imagePreviewUrl;\n\n  const handleFormSubmit = async (values: z.infer<typeof EditItemFormSchema>) => {\n    if (!item?.id || !vendorId) {\n        toast({ variant: "destructive", title: "Error", description: "Item ID or Vendor ID is missing."});\n        return;\n    }\n    if (!storage) {\n        toast({ variant: "destructive", title: "Error", description: "Storage service is not available."});\n        return;\n    }\n    setIsSubmitting(true);\n\n    const formData = new FormData();\n    formData.append('itemId', item.id);\n\n    if (selectedFile) {\n        setIsUploadingFile(true);\n        setUploadProgress(0);\n        const filePath = \`vendor_inventory_images/\${vendorId}/\${item.id}/\${Date.now()}-\${selectedFile.name}\`;\n        const fileStorageRef = storageRef(storage, filePath);\n        const uploadTask = uploadBytesResumable(fileStorageRef, selectedFile);\n\n        try {\n            const downloadURL = await new Promise<string>((resolve, reject) => {\n                uploadTask.on('state_changed',\n                    (snapshot) => {\n                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                        setUploadProgress(progress);\n                    },\n                    (error) => {\n                        console.error("Upload failed:", error);\n                        toast({ variant: "destructive", title: "Image Upload Failed", description: error.message });\n                        reject(error);\n                    },\n                    async () => {\n                        const url = await getDownloadURL(uploadTask.snapshot.ref);\n                        resolve(url);\n                    }\n                );\n            });\n            formData.append('imageUrl', downloadURL);\n        } catch (error) {\n            setIsUploadingFile(false);\n            setUploadProgress(null);\n            setIsSubmitting(false);\n            return; // Stop form submission if upload fails\n        }\n        setIsUploadingFile(false);\n        setUploadProgress(null);\n    } else {\n        // If no new file, use the existing URL from the form values\n        formData.append('imageUrl', values.imageUrl || '');\n    }\n    \n    // Append all other values to formData\n    Object.entries(values).forEach(([key, value]) => {\n        if (key !== 'imageUrl' && value !== undefined) {\n            formData.append(key, String(value));\n        }\n    });\n    \n    // Call server action\n    const result = await updateVendorItemDetails(updateState, formData);\n    setUpdateState(result);\n    setIsSubmitting(false);\n  };\n\n\n  if (!item) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => {\n        if (isUploadingFile || isSubmitting) return; // Prevent closing while operations are in progress\n        onOpenChange(open);\n    }}>\n      <DialogContent className="sm:max-w-md">\n        <DialogHeader>\n          <DialogTitle>Edit Item: {item.itemName}</DialogTitle>\n          <DialogDescription>Make changes to your inventory item here. Click save when you're done.</DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-4">\n                <FormField\n                    control={form.control}\n                    name="itemName"\n                    render={({ field }) => (\n                        <FormItem>\n                        <FormLabel>Item Name</FormLabel>\n                        <FormControl><Input {...field} disabled={item.isCustomItem === false || isUploadingFile || isSubmitting} /></FormControl>\n                        {!item.isCustomItem && <FormDescription className="text-xs">Item name cannot be changed for global items.</FormDescription>}\n                        <FormMessage />\n                        </FormItem>\n                    )}\n                />\n                <FormField\n                    control={form.control}\n                    name="vendorItemCategory"\n                    render={({ field }) => (\n                        <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <FormControl><Input {...field} disabled={item.isCustomItem === false || isUploadingFile || isSubmitting} /></FormControl>\n                         {!item.isCustomItem && <FormDescription className="text-xs">Category cannot be changed for global items.</FormDescription>}\n                        <FormMessage />\n                        </FormItem>\n                    )}\n                />\n                 <div className="grid grid-cols-2 gap-4">\n                    <FormField\n                        control={form.control}\n                        name="price"\n                        render={({ field }) => (\n                            <FormItem>\n                            <FormLabel>Price (â¹)</FormLabel>\n                            <FormControl><Input type="number" step="0.01" {...field} disabled={isUploadingFile || isSubmitting} /></FormControl>\n                            <FormMessage />\n                            </FormItem>\n                        )}\n                    />\n                     <FormField\n                        control={form.control}\n                        name="mrp"\n                        render={({ field }) => (\n                            <FormItem>\n                            <FormLabel>MRP (â¹)</FormLabel>\n                            <FormControl><Input type="number" step="0.01" {...field} disabled={item.isCustomItem === false || isUploadingFile || isSubmitting} placeholder="Optional" value={field.value ?? ''} /></FormControl>\n                             {!item.isCustomItem && <FormDescription className="text-xs">MRP is from global item.</FormDescription>}\n                            <FormMessage />\n                            </FormItem>\n                        )}\n                    />\n                </div>\n                 <FormField\n                    control={form.control}\n                    name="stockQuantity"\n                    render={({ field }) => (\n                        <FormItem>\n                        <FormLabel>Stock Quantity</FormLabel>\n                        <FormControl><Input type="number" step="1" {...field} disabled={isUploadingFile || isSubmitting}/></FormControl>\n                        <FormMessage />\n                        </FormItem>\n                    )}\n                />\n                <FormField\n                    control={form.control}\n                    name="description"\n                    render={({ field }) => (\n                        <FormItem>\n                        <FormLabel>Description (Optional)</FormLabel>\n                        <FormControl><Textarea {...field} rows={3} disabled={item.isCustomItem === false || isUploadingFile || isSubmitting}/></FormControl>\n                         {!item.isCustomItem && <FormDescription className="text-xs">Description cannot be changed for global items.</FormDescription>}\n                        <FormMessage />\n                        </FormItem>\n                    )}\n                />\n                \n                {/* Image URL and Upload Section */}\n                <FormItem>\n                    <FormLabel>Item Image</FormLabel>\n                    {currentImageUrlForDisplay && (\n                        <Image src={currentImageUrlForDisplay} alt="Current item image" width={100} height={100} className="mt-2 rounded object-cover" unoptimized/>\n                    )}\n                     <FormField\n                        control={form.control}\n                        name="imageUrl"\n                        render={({ field }) => (\n                            <FormItem className="mt-2">\n                                <FormLabel className="text-xs">Image URL (or upload new below)</FormLabel>\n                                <FormControl>\n                                    <Input \n                                        type="url" \n                                        placeholder="https://example.com/image.png" \n                                        {...field} \n                                        onChange={(e) => {\n                                            field.onChange(e);\n                                            setSelectedFile(null); // Clear selected file if URL is manually changed\n                                            setImagePreviewUrl(e.target.value);\n                                        }}\n                                        disabled={isUploadingFile || isSubmitting}\n                                    />\n                                </FormControl>\n                                <FormMessage />\n                            </FormItem>\n                        )}\n                    />\n                    <div className="mt-2">\n                        <Label htmlFor="newImageFile" className="text-xs">Upload New Image</Label>\n                        <Input \n                            id="newImageFile" \n                            type="file" \n                            accept="image/*" \n                            onChange={handleFileChange} \n                            ref={fileInputRef}\n                            className="mt-1 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary file:text-primary-foreground hover:file:bg-primary/90"\n                            disabled={isUploadingFile || isSubmitting}\n                        />\n                    </div>\n                    {isUploadingFile && uploadProgress !== null && (\n                        <div className="mt-2 space-y-1">\n                            <Progress value={uploadProgress} className="w-full h-2" />\n                            <p className="text-xs text-muted-foreground text-center">Uploading: {Math.round(uploadProgress)}%</p>\n                        </div>\n                    )}\n                </FormItem>\n\n                <DialogFooter>\n                    <DialogClose asChild><Button type="button" variant="outline" disabled={isUploadingFile || isSubmitting}>Cancel</Button></DialogClose>\n                    <UpdateItemSubmitButton isUploadingFile={isUploadingFile || isSubmitting} />\n                </DialogFooter>\n            </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nconst AddGlobalItemFormSchema = z.object({\n  price: z.preprocess(\n    (val) => parseFloat(String(val)),\n    z.number({invalid_type_error: "Price must be a number."}).min(0, "Price must be a positive number.")\n  ),\n  stockQuantity: z.preprocess(\n    (val) => parseInt(String(val), 10),\n    z.number({invalid_type_error: "Stock must be an integer."}).int().min(0, "Stock must be a non-negative integer.")\n  ),\n  mrp: z.preprocess(\n    (val) => val ? parseFloat(String(val)) : undefined,\n    z.number().optional()\n  ),\n}).refine(data => !data.mrp || data.price <= data.mrp, {\n    message: "Price cannot be higher than MRP.",\n    path: ["price"],\n});\n\nfunction AddGlobalItemDialog({ item, isOpen, onOpenChange, onItemAdded }: { item: GlobalItem | null; isOpen: boolean; onOpenChange: (open: boolean) => void; onItemAdded: () => void }) {\n  const [state, formAction, isPending] = useActionState(linkGlobalItemToVendorInventory, initialLinkGlobalItemState);\n  const { toast } = useToast();\n  const formRef = useRef<HTMLFormElement>(null);\n\n  const form = useForm<z.infer<typeof AddGlobalItemFormSchema>>({\n    resolver: zodResolver(AddGlobalItemFormSchema),\n    defaultValues: { price: 0, stockQuantity: 0 }\n  });\n\n  useEffect(() => {\n    if (state.success) {\n      toast({ title: "Item Added", description: state.message });\n      form.reset();\n      onItemAdded();\n      onOpenChange(false);\n    }\n    if (state.error) {\n      toast({ variant: "destructive", title: "Failed to Add Item", description: state.error });\n    }\n     if (state.fields) {\n      Object.entries(state.fields).forEach(([key, value]) => {\n        form.setError(key as keyof z.infer<typeof AddGlobalItemFormSchema>, { type: 'manual', message: value[0] });\n      });\n    }\n  }, [state, toast, onItemAdded, onOpenChange, form]);\n  \n  if (!item) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Add "{item.itemName}" to Your Inventory</DialogTitle>\n          <DialogDescription>Set your selling price and current stock for this item. Other details are managed globally.</DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n            <form action={formAction} ref={formRef} className="space-y-4" onSubmit={(evt) => {\n                evt.preventDefault();\n                form.handleSubmit(() => {\n                    formAction(new FormData(formRef.current!));\n                })(evt);\n            }}>\n                <input type="hidden" name="globalItemId" value={item.id} />\n                <input type="hidden" name="mrp" value={item.mrp || ''} />\n                \n                {item.mrp && <p className="text-sm text-muted-foreground">Maximum Retail Price (MRP): <span className="font-bold text-foreground">â¹{item.mrp.toFixed(2)}</span></p>}\n\n                <FormField\n                    control={form.control}\n                    name="price"\n                    render={({ field }) => (\n                        <FormItem>\n                        <FormLabel>Your Selling Price (â¹)</FormLabel>\n                        <FormControl><Input type="number" step="0.01" {...field} /></FormControl>\n                        <FormMessage />\n                        </FormItem>\n                    )}\n                />\n                 <FormField\n                    control={form.control}\n                    name="stockQuantity"\n                    render={({ field }) => (\n                        <FormItem>\n                        <FormLabel>Current Stock Quantity</FormLabel>\n                        <FormControl><Input type="number" step="1" {...field} /></FormControl>\n                        <FormMessage />\n                        </FormItem>\n                    )}\n                />\n                <DialogFooter>\n                    <DialogClose asChild><Button type="button" variant="outline" disabled={isPending}>Cancel</Button></DialogClose>\n                    <Button type="submit" disabled={isPending}>\n                        {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}\n                        Add to Inventory\n                    </Button>\n                </DialogFooter>\n            </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nconst AddCustomItemFormSchema = z.object({\n  itemName: z.string().min(1, "Item name cannot be empty."),\n  vendorItemCategory: z.string().min(1, "Category cannot be empty."),\n  price: z.preprocess(\n    (val) => parseFloat(String(val)),\n    z.number({invalid_type_error: "Price must be a number."}).min(0, "Price must be a positive number.")\n  ),\n   mrp: z.preprocess(\n    (val) => val ? parseFloat(String(val)) : undefined,\n    z.number().min(0, "MRP must be a positive number.").optional()\n  ),\n  stockQuantity: z.preprocess(\n    (val) => parseInt(String(val), 10),\n    z.number({invalid_type_error: "Stock must be an integer."}).int().min(0, "Stock must be a non-negative integer.")\n  ),\n  unit: z.string().min(1, "Please specify a unit (e.g., 'piece', 'kg', 'serving')."),\n  description: z.string().optional(),\n}).refine(data => !data.mrp || data.price <= data.mrp, {\n    message: "Price cannot be higher than MRP.",\n    path: ["price"],\n});\n\nfunction AddCustomItemDialog({ isOpen, onOpenChange, onItemAdded }: { isOpen: boolean; onOpenChange: (open: boolean) => void; onItemAdded: () => void }) {\n  const [state, formAction, isPending] = useActionState(addCustomVendorItem, initialAddCustomItemState);\n  const { toast } = useToast();\n  const formRef = useRef<HTMLFormElement>(null);\n  \n  const form = useForm<z.infer<typeof AddCustomItemFormSchema>>({\n    resolver: zodResolver(AddCustomItemFormSchema),\n    defaultValues: {\n      itemName: '',\n      vendorItemCategory: '',\n      price: 0,\n      mrp: undefined,\n      stockQuantity: 0,\n      unit: '',\n      description: '',\n    }\n  });\n\n  useEffect(() => {\n    if (state?.success) {\n      toast({ title: "Item Added", description: state.message });\n      form.reset();\n      onItemAdded();\n      onOpenChange(false);\n    }\n    if (state?.error) {\n      toast({ variant: "destructive", title: "Failed to Add Item", description: state.error });\n    }\n  }, [state, toast, onItemAdded, onOpenChange, form]);\n  \n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Add Custom Item</DialogTitle>\n          <DialogDescription>\n            Add a new product or menu item that is unique to your store.\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n            <form ref={formRef} action={formAction} className="space-y-4">\n                <FormField control={form.control} name="itemName" render={({ field }) => (\n                    <FormItem><FormLabel>Item Name</FormLabel><FormControl><Input {...field} placeholder="e.g., 'Artisan Sourdough Bread'" /></FormControl><FormMessage /></FormItem>\n                )}/>\n                <FormField control={form.control} name="vendorItemCategory" render={({ field }) => (\n                    <FormItem><FormLabel>Category</FormLabel><FormControl><Input {...field} placeholder="e.g., 'Breads', 'Main Course'" /></FormControl><FormMessage /></FormItem>\n                )}/>\n                <div className="grid grid-cols-2 gap-4">\n                    <FormField control={form.control} name="price" render={({ field }) => (\n                        <FormItem><FormLabel>Price (â¹)</FormLabel><FormControl><Input type="number" step="0.01" {...field} /></FormControl><FormMessage /></FormItem>\n                    )}/>\n                    <FormField control={form.control} name="mrp" render={({ field }) => (\n                        <FormItem><FormLabel>MRP (â¹)</FormLabel><FormControl><Input type="number" step="0.01" {...field} placeholder="Optional" value={field.value ?? ''} /></FormControl><FormMessage /></FormItem>\n                    )}/>\n                </div>\n                <div className="grid grid-cols-2 gap-4">\n                     <FormField control={form.control} name="stockQuantity" render={({ field }) => (\n                        <FormItem><FormLabel>Stock Quantity</FormLabel><FormControl><Input type="number" step="1" {...field} /></FormControl><FormMessage /></FormItem>\n                    )}/>\n                     <FormField control={form.control} name="unit" render={({ field }) => (\n                        <FormItem><FormLabel>Unit</FormLabel><FormControl><Input {...field} placeholder="e.g., 'piece', 'kg'" /></FormControl><FormMessage /></FormItem>\n                    )}/>\n                </div>\n                <FormField control={form.control} name="description" render={({ field }) => (\n                    <FormItem><FormLabel>Description (Optional)</FormLabel><FormControl><Textarea {...field} rows={3} /></FormControl><FormMessage /></FormItem>\n                )}/>\n                <DialogFooter>\n                    <DialogClose asChild><Button type="button" variant="outline" disabled={isPending}>Cancel</Button></DialogClose>\n                    <Button type="submit" disabled={isPending}>\n                        {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}\n                        Add Item\n                    </Button>\n                </DialogFooter>\n            </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n\n\nexport default function InventoryPage() {\n  const { db } = useFirebaseAuth();\n  const [session, setSession] = useState<VendorSession | null>(null);\n  const [isLoadingSession, setIsLoadingSession] = useState(true);\n  const [menuPdfFile, setMenuPdfFile] = useState<File | null>(null);\n  const { toast } = useToast();\n\n  const [menuUploadState, menuUploadFormAction, isMenuUploading] = useActionState(handleMenuPdfUpload, initialMenuUploadState);\n  const [isSavingMenu, setIsSavingMenu] = useState(false);\n\n  const [deleteItemState, deleteItemFormAction, isDeletingItem] = useActionState(deleteVendorItem, initialDeleteItemState);\n  const [removeDuplicatesState, removeDuplicatesFormAction, isRemovingDuplicates] = useActionState(handleRemoveDuplicateItems, initialRemoveDuplicatesState);\n  const [deleteSelectedItemsState, deleteSelectedItemsFormAction, isDeletingSelectedItems] = useActionState(handleDeleteSelectedItems, initialDeleteSelectedItemsState);\n\n\n  const [vendorInventory, setVendorInventory] = useState<VendorInventoryItem[]>([]);\n  const [isLoadingInventory, setIsLoadingInventory] = useState(false);\n  const [isRefreshingInventory, setIsRefreshingInventory] = useState(false);\n  const [selectedCategoryFilter, setSelectedCategoryFilter] = useState<string>("all");\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\n  \n  const [showExtractedMenu, setShowExtractedMenu] = useState(true);\n\n  const [editingItem, setEditingItem] = useState<VendorInventoryItem | null>(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n\n  // For Global Catalog Search\n  const [globalItemsResult, setGlobalItemsResult] = useState<GlobalItem[]>([]);\n  const [isSearchingGlobal, setIsSearchingGlobal] = useState(false);\n  const [itemToAdd, setItemToAdd] = useState<GlobalItem | null>(null);\n  const [isAddGlobalItemDialogOpen, setIsAddGlobalItemDialogOpen] = useState(false);\n  const [isAddCustomItemDialogOpen, setIsAddCustomItemDialogOpen] = useState(false);\n  \n  function mapStoreCategoryToItemType(category: Vendor['storeCategory']): GlobalItem['sharedItemType'] | null {\n    switch (category) {\n        case 'Grocery Store': return 'grocery';\n        case 'Pharmacy': return 'medical';\n        case 'Liquor Shop': return 'liquor';\n        case 'Pet Shop': return 'other'; // Or a dedicated 'pet' type if added to model\n        default: return null;\n    }\n  }\n\n  const handleSearchGlobalItems = async () => {\n    if (!session?.storeCategory) return;\n    const itemType = mapStoreCategoryToItemType(session.storeCategory);\n    \n    if (!itemType) {\n        toast({ variant: "destructive", title: "Not Applicable", description: "Global catalog is not available for this store type." });\n        return;\n    }\n\n    setIsSearchingGlobal(true);\n    setGlobalItemsResult([]);\n    try {\n        const items = await getGlobalItemsByType(itemType);\n        setGlobalItemsResult(items);\n        if (items.length === 0) {\n            toast({ title: "No Items Found", description: \`No global items were found for the '\${itemType}' category.\` });\n        }\n    } catch (error) {\n        toast({ variant: "destructive", title: "Search Failed", description: (error as Error).message });\n    } finally {\n        setIsSearchingGlobal(false);\n    }\n  };\n\n  const openAddGlobalItemDialog = (item: GlobalItem) => {\n    setItemToAdd(item);\n    setIsAddGlobalItemDialogOpen(true);\n  };\n\n\n  const uniqueCategories = useMemo(() => {\n    const categories = new Set(vendorInventory.map(item => item.vendorItemCategory).filter(Boolean) as string[]);\n    return ["all", ...Array.from(categories).sort()];\n  }, [vendorInventory]);\n\n  const filteredInventory = useMemo(() => {\n    if (selectedCategoryFilter === "all") {\n      return vendorInventory;\n    }\n    return vendorInventory.filter(item => item.vendorItemCategory === selectedCategoryFilter);\n  }, [vendorInventory, selectedCategoryFilter]);\n\n\n  const fetchAndSetInventory = async (vendorId: string, showToast = false) => {\n    if (!vendorId) {\n      console.warn("[InventoryPage] fetchAndSetInventory called without vendorId.");\n      return;\n    }\n    console.log(\`[InventoryPage] Fetching inventory for \${vendorId}\`);\n    setIsLoadingInventory(true);\n    if (showToast) setIsRefreshingInventory(true);\n\n    try {\n      const items = await getVendorInventory(vendorId);\n      setVendorInventory(items);\n      setSelectedItems([]);\n      if (showToast) {\n        toast({ title: "Inventory Refreshed", description: \`Found \${items.length} items.\` });\n      }\n    } catch (error) {\n      console.error("[InventoryPage] Error in fetchAndSetInventory:", error);\n      toast({ variant: "destructive", title: "Error fetching inventory", description: (error as Error).message });\n    } finally {\n      setIsLoadingInventory(false);\n      if (showToast) setIsRefreshingInventory(false);\n    }\n  };\n\n  useEffect(() => {\n    async function fetchSessionData() {\n      setIsLoadingSession(true);\n      console.log("[InventoryPage] Fetching session data...");\n      const currentSession = await getSession();\n      if (currentSession && currentSession.isAuthenticated && currentSession.storeCategory && currentSession.email && currentSession.shopName && currentSession.uid) {\n        console.log("[InventoryPage] Session data fetched:", currentSession.uid);\n        const sessionData = {\n          isAuthenticated: true,\n          email: currentSession.email,\n          shopName: currentSession.shopName,\n          storeCategory: currentSession.storeCategory as VendorSession['storeCategory'],\n          uid: currentSession.uid,\n        };\n        setSession(sessionData);\n\n        // Only fetch inventory if not a grocery store\n        if (sessionData.storeCategory !== 'Grocery Store') {\n            fetchAndSetInventory(currentSession.uid);\n        } else {\n            setIsLoadingInventory(false);\n        }\n      } else {\n        console.warn("[InventoryPage] Session not authenticated or missing data.");\n        setSession(null);\n        setIsLoadingInventory(false);\n      }\n      setIsLoadingSession(false);\n    }\n    fetchSessionData();\n  }, []);\n\n  useEffect(() => {\n    if (menuUploadState?.extractedMenu) {\n      setShowExtractedMenu(true);\n    }\n    if (menuUploadState?.error) {\n      toast({ variant: "destructive", title: "Menu Upload Error", description: menuUploadState.error });\n    }\n    if (menuUploadState?.message && !menuUploadState.error) {\n      toast({ title: "Menu Processing", description: menuUploadState.message });\n    }\n  }, [menuUploadState, toast]);\n\n  useEffect(() => {\n    if (deleteItemState?.error && !isDeletingItem) { \n        toast({ variant: "destructive", title: "Delete Item Error", description: deleteItemState.error });\n    }\n    if (deleteItemState?.success && deleteItemState.message) {\n        toast({ title: "Item Deleted", description: deleteItemState.message });\n        if (session?.uid) {\n            fetchAndSetInventory(session.uid, true);\n        }\n    }\n  }, [deleteItemState, toast, session?.uid, isDeletingItem]);\n\n  useEffect(() => {\n    if (removeDuplicatesState?.error) {\n        toast({ variant: "destructive", title: "Remove Duplicates Error", description: removeDuplicatesState.error });\n    }\n    if (removeDuplicatesState?.success) {\n        toast({ title: "Duplicates Processed", description: removeDuplicatesState.message });\n        if (session?.uid) {\n            fetchAndSetInventory(session.uid, true);\n        }\n    }\n  }, [removeDuplicatesState, toast, session?.uid]);\n\n  useEffect(() => {\n    if (deleteSelectedItemsState?.error) {\n        toast({ variant: "destructive", title: "Delete Selected Error", description: deleteSelectedItemsState.error });\n    }\n    if (deleteSelectedItemsState?.success && deleteSelectedItemsState.message) {\n        toast({ title: "Items Deleted", description: deleteSelectedItemsState.message });\n        if (session?.uid) {\n            fetchAndSetInventory(session.uid, true); \n        }\n    }\n  }, [deleteSelectedItemsState, toast, session?.uid]);\n\n\n  const handlePdfFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && file.type === "application/pdf") {\n      setMenuPdfFile(file);\n      console.log("[InventoryPage] menuPdfFile selected:", file.name);\n    } else {\n      setMenuPdfFile(null);\n      if (file) toast({ variant: "destructive", title: "Invalid File", description: "Please upload a PDF file."});\n      console.warn("[InventoryPage] Invalid file type selected or no file.");\n    }\n  };\n\n  const handleSelectAll = (checked: boolean | 'indeterminate') => {\n    if (checked === true) {\n      setSelectedItems(filteredInventory.map(item => item.id || ''));\n    } else {\n      setSelectedItems([]);\n    }\n  };\n\n  const handleSelectItem = (itemId: string, checked: boolean | 'indeterminate') => {\n    if (checked === true) {\n      setSelectedItems(prev => [...prev, itemId]);\n    } else {\n      setSelectedItems(prev => prev.filter(id => id !== itemId));\n    }\n  };\n\n  const openEditDialog = (item: VendorInventoryItem) => {\n    setEditingItem(item);\n    setIsEditDialogOpen(true);\n  };\n  \n  const handleConfirmSaveMenu = async () => {\n    if (!session?.uid || !menuUploadState?.extractedMenu?.extractedItems || !db) {\n      toast({ variant: 'destructive', title: 'Error', description: 'Cannot save menu. User session, extracted items, or DB service are missing.' });\n      return;\n    }\n\n    setIsSavingMenu(true);\n    const vendorId = session.uid;\n    const itemsToSave = menuUploadState.extractedMenu.extractedItems;\n    \n    function parsePrice(priceString: string): number {\n        if (!priceString) return 0;\n        const cleanedString = priceString.replace(/[\$,Â£â¬â¹,]/g, '').trim();\n        const price = parseFloat(cleanedString);\n        return isNaN(price) ? 0 : price;\n    }\n\n    try {\n      const batch = writeBatch(db);\n      const inventoryCollectionRef = collection(db, 'vendors', vendorId, 'inventory');\n      const now = Timestamp.now();\n      \n      itemsToSave.forEach(item => {\n        const newItemRef = doc(inventoryCollectionRef); // Create ref with auto-generated ID\n        const newItemData: Omit<VendorInventoryItem, 'id'> = {\n          vendorId: vendorId,\n          isCustomItem: true,\n          itemName: item.itemName,\n          vendorItemCategory: item.category,\n          stockQuantity: 0, // Default for menu items\n          price: parsePrice(item.price),\n          unit: 'serving', // Default for menu items\n          isAvailableOnThru: true,\n          imageUrl: \`https://placehold.co/50x50.png?text=\${encodeURIComponent(item.itemName.substring(0, 10))}\`,\n          createdAt: now,\n          updatedAt: now,\n          lastStockUpdate: now,\n          ...(item.description !== undefined && { description: item.description }),\n        };\n        batch.set(newItemRef, newItemData);\n      });\n\n      await batch.commit();\n\n      toast({ title: 'Menu Saved', description: \`\${itemsToSave.length} menu items saved successfully!\` });\n      fetchAndSetInventory(vendorId, true);\n      setShowExtractedMenu(false); // Hide the extracted items view after successful save\n      \n    } catch (error) {\n      console.error('Error saving menu items:', error);\n      const errorMessage = error instanceof Error ? \`Firestore error: \${error.message}\` : 'An unknown error occurred.';\n      toast({ variant: 'destructive', title: 'Save Menu Error', description: errorMessage });\n    } finally {\n      setIsSavingMenu(false);\n    }\n  };\n\n\n  const isAllSelected = filteredInventory.length > 0 && selectedItems.length === filteredInventory.length;\n  const isSomeSelected = selectedItems.length > 0 && selectedItems.length < filteredInventory.length;\n\n\n  const renderRestaurantCafeContent = () => {\n    return (\n      <div className="space-y-8">\n        <Card className="shadow-lg">\n          <CardHeader className="flex flex-row items-center justify-between">\n            <div>\n              <CardTitle className="flex items-center"><BookOpen className="mr-2 h-5 w-5 text-primary" />Manage Your Menu</CardTitle>\n              <CardDescription>Add, edit, and organize your menu items. You can upload a PDF menu to get started.</CardDescription>\n            </div>\n            <DialogTrigger asChild>\n                <Button><PlusCircle className="mr-2 h-4 w-4" />Add Menu Item Manually</Button>\n            </DialogTrigger>\n          </CardHeader>\n          <CardContent>\n            <form action={menuUploadFormAction} className="space-y-4 mb-6 p-4 border rounded-md">\n              <Label htmlFor="menuPdf" className="font-semibold">Upload Menu PDF</Label>\n              <Input\n                id="menuPdf"\n                name="menuPdf"\n                type="file"\n                accept="application/pdf"\n                onChange={handlePdfFileChange}\n                required\n                className="file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary file:text-primary-foreground hover:file:bg-primary/90"\n              />\n              <MenuUploadSubmitButton />\n               <p className="text-xs text-muted-foreground">\n                The AI will try to extract items, categories, prices, and descriptions. Results may vary based on PDF quality.\n              </p>\n            </form>\n\n            {isMenuUploading && (\n              <div className="flex items-center justify-center p-6">\n                <Loader2 className="mr-2 h-8 w-8 animate-spin text-primary" />\n                <p className="text-muted-foreground">Processing your menu with AI, please wait...</p>\n              </div>\n            )}\n\n            {menuUploadState?.extractedMenu && menuUploadState.extractedMenu.extractedItems.length > 0 && showExtractedMenu && (\n              <div className="mt-6 p-4 border rounded-md">\n                <h3 className="text-lg font-semibold mb-2 text-foreground">Extracted Menu Items:</h3>\n                <p className="text-sm text-muted-foreground mb-2">Review the items below. You can edit them later after saving.</p>\n                <div className="bg-muted p-4 rounded-md text-xs overflow-x-auto max-h-96">\n                  <pre>\n                    {JSON.stringify(menuUploadState.extractedMenu.extractedItems, null, 2)}\n                  </pre>\n                </div>\n\n                <SaveMenuButton onClick={handleConfirmSaveMenu} isSaving={isSavingMenu} />\n              </div>\n            )}\n\n            {menuUploadState?.extractedMenu && menuUploadState.extractedMenu.extractedItems.length === 0 && !isMenuUploading && (\n                <Alert variant="destructive" className="mt-4">\n                    <AlertTriangle className="h-4 w-4" />\n                    <AlertTitle>No Items Extracted</AlertTitle>\n                    <AlertDescription>\n                        The AI could not extract structured items from the PDF. This might be due to the PDF format or layout.\n                        You can try adding items manually or ensure your PDF is text-based and clearly structured.\n                        {menuUploadState.extractedMenu.rawText && " Some raw text was extracted: " + menuUploadState.extractedMenu.rawText.substring(0, 200) + "..."}\n                    </AlertDescription>\n                </Alert>\n            )}\n\n            <div className="flex justify-between items-center mt-8 mb-4">\n                <h4 className="text-md font-semibold">Current Menu Items (from Database)</h4>\n                <div className="flex items-center gap-2">\n                     {selectedItems.length > 0 && (\n                        <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                                <Button variant="destructive" size="sm">\n                                    <Trash2 className="mr-2 h-4 w-4" />\n                                    Delete ({selectedItems.length})\n                                </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                                <form action={deleteSelectedItemsFormAction}>\n                                    <input type="hidden" name="selectedItemIdsJson" value={JSON.stringify(selectedItems)} />\n                                    <AlertDialogHeader>\n                                        <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                        <AlertDialogDescription>\n                                            This action cannot be undone. This will permanently delete the selected {selectedItems.length} item(s) from your inventory.\n                                        </AlertDialogDescription>\n                                    </AlertDialogHeader>\n                                    <AlertDialogFooter>\n                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                        <DeleteSelectedButton />\n                                    </AlertDialogFooter>\n                                </form>\n                            </AlertDialogContent>\n                        </AlertDialog>\n                    )}\n                    {session?.uid && vendorInventory.length > 0 && (\n                        <form action={removeDuplicatesFormAction}>\n                            <input type="hidden" name="vendorId" value={session.uid} />\n                            <RemoveDuplicatesButton />\n                        </form>\n                    )}\n                    <Button variant="outline" size="sm" onClick={() => session?.uid && fetchAndSetInventory(session.uid, true)} disabled={isRefreshingInventory || isLoadingInventory || isRemovingDuplicates}>\n                        {isRefreshingInventory || isLoadingInventory ? <Loader2 className="mr-2 h-4 w-4 animate-spin"/> : <RefreshCw className="mr-2 h-4 w-4"/>}\n                        Refresh\n                    </Button>\n                </div>\n            </div>\n             {vendorInventory.length > 0 && (\n              <div className="mb-4 flex items-center gap-2">\n                <Filter className="h-5 w-5 text-muted-foreground" />\n                <Select value={selectedCategoryFilter} onValueChange={setSelectedCategoryFilter}>\n                  <SelectTrigger className="w-[200px]">\n                    <SelectValue placeholder="Filter by category..." />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {uniqueCategories.map(category => (\n                      <SelectItem key={category} value={category}>\n                        {category === "all" ? "All Categories" : category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n            {isLoadingInventory && !isRefreshingInventory ? (\n                <div className="space-y-2">\n                    {[1,2,3].map(i => <Skeleton key={i} className="h-12 w-full" />)}\n                </div>\n            ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className="w-[50px]">\n                         <Checkbox\n                            checked={isAllSelected || (isSomeSelected ? 'indeterminate' : false)}\n                            onCheckedChange={handleSelectAll}\n                            aria-label="Select all items"\n                            disabled={filteredInventory.length === 0}\n                          />\n                      </TableHead>\n                      <TableHead className="w-[60px]">Image</TableHead>\n                      <TableHead>Item Name</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead className="text-right">Price</TableHead>\n                      <TableHead className="text-center">Stock</TableHead>\n                      <TableHead className="text-right">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredInventory.length > 0 ? filteredInventory.map((item) => (\n                      <TableRow key={item.id} data-state={selectedItems.includes(item.id || '') ? "selected" : ""}>\n                        <TableCell>\n                           <Checkbox\n                              checked={selectedItems.includes(item.id || '')}\n                              onCheckedChange={(checked) => item.id && handleSelectItem(item.id, checked)}\n                              aria-label={\`Select item \${item.itemName}\`}\n                            />\n                        </TableCell>\n                        <TableCell>\n                          <Image\n                            src={item.imageUrl || 'https://placehold.co/50x50.png'}\n                            alt={item.itemName}\n                            width={40}\n                            height={40}\n                            className="rounded object-cover aspect-square"\n                          />\n                        </TableCell>\n                        <TableCell className="font-medium">{item.itemName}</TableCell>\n                        <TableCell>{item.vendorItemCategory}</TableCell>\n                        <TableCell className="text-right">â¹{item.price.toFixed(2)}</TableCell>\n                        <TableCell className="text-center">{item.stockQuantity}</TableCell>\n                        <TableCell className="space-x-1 text-right">\n                            <Button variant="outline" size="icon" className="h-8 w-8" onClick={() => openEditDialog(item)}>\n                                <Edit3 className="h-4 w-4" />\n                            </Button>\n                            <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                    <Button variant="destructive" size="icon" className="h-8 w-8">\n                                        <Trash2 className="h-4 w-4" />\n                                    </Button>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                    <form action={deleteItemFormAction}>\n                                        <input type="hidden" name="itemId" value={item.id || ''} />\n                                        <AlertDialogHeader>\n                                            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                            <AlertDialogDescription>\n                                                This action cannot be undone. This will permanently delete the item\n                                                "{item.itemName}" from your inventory.\n                                            </AlertDialogDescription>\n                                        </AlertDialogHeader>\n                                        <AlertDialogFooter>\n                                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                            <DeleteItemButton />\n                                        </AlertDialogFooter>\n                                    </form>\n                                </AlertDialogContent>\n                            </AlertDialog>\n                        </TableCell>\n                      </TableRow>\n                    )) : (\n                      <TableRow>\n                        <TableCell colSpan={7} className="text-center text-muted-foreground py-8">\n                          {selectedCategoryFilter === "all"\n                            ? "Your menu is empty. Add items manually or upload a PDF."\n                            : \`No items found in category: "\${selectedCategoryFilter}".\`}\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  };\n\nconst renderGroceryContent = () => {\n    return (\n        <Card className="shadow-lg">\n            <CardHeader>\n                <CardTitle className="flex items-center"><Info className="mr-2 h-5 w-5 text-primary" /> How Grocery Orders Work</CardTitle>\n                <CardDescription>\n                    Your store operates on a dynamic order system. You don't need to manage a static inventory list here.\n                </CardDescription>\n            </CardHeader>\n            <CardContent className="space-y-4 text-sm text-muted-foreground">\n                <p>\n                    1. <strong>Order Broadcast:</strong> When a customer places a grocery order, it will be broadcast to nearby vendors, including you.\n                </p>\n                <p>\n                    2. <strong>Check Your Stock:</strong> The new order will appear on your <Link href="/orders" className="text-primary underline">Orders</Link> page. You can review the requested items.\n                </p>\n                <p>\n                    3. <strong>Confirm Availability:</strong> You can then confirm which items you have in stock and accept the order. The customer will be notified of what's available from your store.\n                </p>\n                <p>\n                    This system ensures customers get the most up-to-date availability without requiring you to constantly update a digital inventory.\n                </p>\n                 <Button asChild className="mt-4">\n                    <Link href="/orders">Go to Orders</Link>\n                </Button>\n            </CardContent>\n        </Card>\n    );\n};\n\n\n  const renderInventoryContent = () => {\n    if (!session || !session.storeCategory) {\n      return <p className="text-muted-foreground">Loading inventory information...</p>;\n    }\n\n    switch (session.storeCategory) {\n      case 'Grocery Store':\n        return renderGroceryContent();\n      case 'Pharmacy':\n      case 'Liquor Shop':\n      case 'Pet Shop': \n        return (\n          <div className="space-y-8">\n            <Card className="shadow-lg">\n              <CardHeader className="flex flex-row items-center justify-between">\n                <div>\n                    <CardTitle className="flex items-center"><Globe className="mr-2 h-5 w-5 text-primary" />Add from Global Catalog</CardTitle>\n                    <CardDescription>Search for standard products and add them to your inventory for {session.storeCategory}.</CardDescription>\n                </div>\n                <div className="flex gap-2">\n                    <Button onClick={handleSearchGlobalItems} disabled={isSearchingGlobal}>\n                        {isSearchingGlobal ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Search className="mr-2 h-4 w-4" />}\n                        Search All Items\n                    </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {isSearchingGlobal ? (\n                     <div className="flex justify-center items-center p-4">\n                        <Loader2 className="mr-2 h-5 w-5 animate-spin" />\n                        <span>Searching...</span>\n                    </div>\n                ) : globalItemsResult.length > 0 ? (\n                  <div className="mt-4 border rounded-lg">\n                    <Table>\n                        <TableHeader>\n                            <TableRow>\n                                <TableHead>Image</TableHead>\n                                <TableHead>Item Name</TableHead>\n                                <TableHead>Brand</TableHead>\n                                <TableHead>MRP</TableHead>\n                                <TableHead className="text-right">Action</TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {globalItemsResult.map(item => (\n                                <TableRow key={item.id}>\n                                    <TableCell>\n                                        <Image src={item.defaultImageUrl || 'https://placehold.co/50x50.png'} alt={item.itemName} width={40} height={40} className="rounded object-cover aspect-square"/>\n                                    </TableCell>\n                                    <TableCell className="font-medium">{item.itemName}</TableCell>\n                                    <TableCell>{item.brand || 'N/A'}</TableCell>\n                                    <TableCell>{item.mrp ? \`â¹\${item.mrp.toFixed(2)}\` : 'N/A'}</TableCell>\n                                    <TableCell className="text-right">\n                                        <Button size="sm" onClick={() => openAddGlobalItemDialog(item)}>\n                                            <PlusCircle className="mr-2 h-4 w-4" /> Add\n                                        </Button>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                  </div>\n                ) : (\n                    <p className="text-sm text-center text-muted-foreground mt-4">No global items found. Click search to populate the catalog.</p>\n                )}\n              </CardContent>\n            </Card>\n            <Card className="shadow-lg">\n              <CardHeader className="flex flex-row items-center justify-between">\n                <div>\n                    <CardTitle className="flex items-center"><Package className="mr-2 h-5 w-5 text-primary" />Your Current Inventory</CardTitle>\n                    <CardDescription>Manage stock and prices for your listed items.</CardDescription>\n                </div>\n                 <div className="flex items-center gap-2">\n                     {selectedItems.length > 0 && (\n                        <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                                <Button variant="destructive" size="sm">\n                                    <Trash2 className="mr-2 h-4 w-4" />\n                                    Delete ({selectedItems.length})\n                                </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                                <form action={deleteSelectedItemsFormAction}>\n                                    <input type="hidden" name="selectedItemIdsJson" value={JSON.stringify(selectedItems)} />\n                                    <AlertDialogHeader>\n                                        <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                        <AlertDialogDescription>\n                                            This action cannot be undone. This will permanently delete the selected {selectedItems.length} item(s) from your inventory.\n                                        </AlertDialogDescription>\n                                    </AlertDialogHeader>\n                                    <AlertDialogFooter>\n                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                        <DeleteSelectedButton />\n                                    </AlertDialogFooter>\n                                </form>\n                            </AlertDialogContent>\n                        </AlertDialog>\n                    )}\n                    <DialogTrigger asChild>\n                        <Button variant="outline" size="sm"><PlusCircle className="mr-2 h-4 w-4" />Add Custom Product</Button>\n                    </DialogTrigger>\n                </div>\n              </CardHeader>\n              <CardContent>\n                 {vendorInventory.length > 0 && (\n                  <div className="mb-4 flex items-center gap-2">\n                    <Filter className="h-5 w-5 text-muted-foreground" />\n                    <Select value={selectedCategoryFilter} onValueChange={setSelectedCategoryFilter}>\n                      <SelectTrigger className="w-[200px]">\n                        <SelectValue placeholder="Filter by category..." />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {uniqueCategories.map(category => (\n                          <SelectItem key={category} value={category}>\n                            {category === "all" ? "All Categories" : category}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                 )}\n                {isLoadingInventory && !isRefreshingInventory ? (\n                    <div className="space-y-2">\n                         {[1,2,3].map(i => <Skeleton key={i} className="h-12 w-full" />)}\n                    </div>\n                ) : (\n                 <Table>\n                  <TableHeader>\n                    <TableRow>\n                       <TableHead className="w-[50px]">\n                         <Checkbox\n                            checked={isAllSelected || (isSomeSelected ? 'indeterminate' : false)}\n                            onCheckedChange={handleSelectAll}\n                            aria-label="Select all items"\n                            disabled={filteredInventory.length === 0}\n                          />\n                      </TableHead>\n                      <TableHead className="w-[60px]">Image</TableHead>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead>MRP</TableHead>\n                      <TableHead className="text-right">Price</TableHead>\n                      <TableHead className="text-center">Stock</TableHead>\n                      <TableHead className="text-right">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                  {filteredInventory.length > 0 ? filteredInventory.map((item) => (\n                      <TableRow key={item.id} data-state={selectedItems.includes(item.id || '') ? "selected" : ""}>\n                        <TableCell>\n                           <Checkbox\n                              checked={selectedItems.includes(item.id || '')}\n                              onCheckedChange={(checked) => item.id && handleSelectItem(item.id, checked)}\n                              aria-label={\`Select item \${item.itemName}\`}\n                            />\n                        </TableCell>\n                        <TableCell>\n                           <Image\n                            src={item.imageUrl || 'https://placehold.co/50x50.png'}\n                            alt={item.itemName}\n                            width={40}\n                            height={40}\n                            className="rounded object-cover aspect-square"\n                          />\n                        </TableCell>\n                        <TableCell className="font-medium flex items-center gap-2">\n                            {item.itemName}\n                            {!item.isCustomItem && <Globe className="h-3 w-3 text-muted-foreground" title="Global Item"/>}\n                        </TableCell>\n                        <TableCell>{item.vendorItemCategory}</TableCell>\n                        <TableCell>{item.mrp ? \`â¹\${item.mrp.toFixed(2)}\` : 'N/A'}</TableCell>\n                        <TableCell className="text-right">â¹{item.price.toFixed(2)}</TableCell>\n                        <TableCell className="text-center">{item.stockQuantity}</TableCell>\n                        <TableCell className="space-x-1 text-right">\n                            <Button variant="outline" size="icon" className="h-8 w-8" onClick={() => openEditDialog(item)}>\n                                <Edit3 className="h-4 w-4" />\n                            </Button>\n                             <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                    <Button variant="destructive" size="icon" className="h-8 w-8">\n                                        <Trash2 className="h-4 w-4" />\n                                    </Button>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                    <form action={deleteItemFormAction}>\n                                        <input type="hidden" name="itemId" value={item.id || ''} />\n                                        <AlertDialogHeader>\n                                            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                            <AlertDialogDescription>\n                                                This action cannot be undone. This will permanently delete the item\n                                                "{item.itemName}" from your inventory.\n                                            </AlertDialogDescription>\n                                        </AlertDialogHeader>\n                                        <AlertDialogFooter>\n                                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                            <DeleteItemButton />\n                                        </AlertDialogFooter>\n                                    </form>\n                                </AlertDialogContent>\n                            </AlertDialog>\n                        </TableCell>\n                      </TableRow>\n                    )) : (\n                      <TableRow>\n                        <TableCell colSpan={8} className="text-center text-muted-foreground py-8">\n                          {selectedCategoryFilter === "all"\n                            ? "No inventory items yet. Start by adding products."\n                            : \`No items found in category: "\${selectedCategoryFilter}".\`}\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        );\n      case 'Restaurant':\n      case 'Cafe':\n      case 'Bakery':\n        return renderRestaurantCafeContent();\n      case 'Gift Shop':\n      case 'Boutique':\n      case 'Electronics':\n      case 'Other':\n      default:\n        return (\n          <Card className="shadow-lg">\n             <CardHeader className="flex flex-row items-center justify-between">\n              <div>\n                <CardTitle className="flex items-center"><ListPlus className="mr-2 h-5 w-5 text-primary" />Manage Your Products</CardTitle>\n                <CardDescription>Add and update your unique product listings.</CardDescription>\n              </div>\n              <div className="flex items-center gap-2">\n                  {selectedItems.length > 0 && (\n                    <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                            <Button variant="destructive" size="sm">\n                                <Trash2 className="mr-2 h-4 w-4" />\n                                Delete ({selectedItems.length})\n                            </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                            <form action={deleteSelectedItemsFormAction}>\n                                <input type="hidden" name="selectedItemIdsJson" value={JSON.stringify(selectedItems)} />\n                                <AlertDialogHeader>\n                                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                        This action cannot be undone. This will permanently delete the selected {selectedItems.length} item(s) from your inventory.\n                                    </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                    <DeleteSelectedButton />\n                                </AlertDialogFooter>\n                            </form>\n                        </AlertDialogContent>\n                    </AlertDialog>\n                  )}\n                  <DialogTrigger asChild>\n                    <Button size="sm"><PlusCircle className="mr-2 h-4 w-4" />Add Product</Button>\n                  </DialogTrigger>\n              </div>\n            </CardHeader>\n            <CardContent>\n             {vendorInventory.length > 0 && (\n                <div className="mb-4 flex items-center gap-2">\n                    <Filter className="h-5 w-5 text-muted-foreground" />\n                    <Select value={selectedCategoryFilter} onValueChange={setSelectedCategoryFilter}>\n                    <SelectTrigger className="w-[200px]">\n                        <SelectValue placeholder="Filter by category..." />\n                    </SelectTrigger>\n                    <SelectContent>\n                        {uniqueCategories.map(category => (\n                        <SelectItem key={category} value={category}>\n                            {category === "all" ? "All Categories" : category}\n                        </SelectItem>\n                        ))}\n                    </SelectContent>\n                    </Select>\n                </div>\n                )}\n              {isLoadingInventory && !isRefreshingInventory ? (\n                <div className="space-y-2">\n                    {[1,2,3].map(i => <Skeleton key={i} className="h-12 w-full" />)}\n                </div>\n                ) : (\n              <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className="w-[50px]">\n                         <Checkbox\n                            checked={isAllSelected || (isSomeSelected ? 'indeterminate' : false)}\n                            onCheckedChange={handleSelectAll}\n                            aria-label="Select all items"\n                            disabled={filteredInventory.length === 0}\n                          />\n                      </TableHead>\n                      <TableHead className="w-[60px]">Image</TableHead>\n                      <TableHead>Product Name</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead>MRP</TableHead>\n                      <TableHead className="text-right">Price</TableHead>\n                      <TableHead className="text-center">Stock</TableHead>\n                      <TableHead className="text-right">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredInventory.length > 0 ? filteredInventory.map((item) => (\n                      <TableRow key={item.id} data-state={selectedItems.includes(item.id || '') ? "selected" : ""}>\n                        <TableCell>\n                           <Checkbox\n                              checked={selectedItems.includes(item.id || '')}\n                              onCheckedChange={(checked) => item.id && handleSelectItem(item.id, checked)}\n                              aria-label={\`Select item \${item.itemName}\`}\n                            />\n                        </TableCell>\n                        <TableCell>\n                           <Image\n                            src={item.imageUrl || 'https://placehold.co/50x50.png'}\n                            alt={item.itemName}\n                            width={40}\n                            height={40}\n                            className="rounded object-cover aspect-square"\n                          />\n                        </TableCell>\n                        <TableCell className="font-medium">{item.itemName}</TableCell>\n                        <TableCell>{item.vendorItemCategory}</TableCell>\n                        <TableCell>{item.mrp ? \`â¹\${item.mrp.toFixed(2)}\` : 'N/A'}</TableCell>\n                        <TableCell className="text-right">â¹{item.price.toFixed(2)}</TableCell>\n                        <TableCell className="text-center">{item.stockQuantity}</TableCell>\n                        <TableCell className="space-x-1 text-right">\n                           <Button variant="outline" size="icon" className="h-8 w-8" onClick={() => openEditDialog(item)}>\n                                <Edit3 className="h-4 w-4" />\n                            </Button>\n                             <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                    <Button variant="destructive" size="icon" className="h-8 w-8">\n                                        <Trash2 className="h-4 w-4" />\n                                    </Button>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                    <form action={deleteItemFormAction}>\n                                        <input type="hidden" name="itemId" value={item.id || ''} />\n                                        <AlertDialogHeader>\n                                            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                            <AlertDialogDescription>\n                                                This action cannot be undone. This will permanently delete the item\n                                                "{item.itemName}" from your inventory.\n                                            </AlertDialogDescription>\n                                        </AlertDialogHeader>\n                                        <AlertDialogFooter>\n                                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                            <DeleteItemButton />\n                                        </AlertDialogFooter>\n                                    </form>\n                                </AlertDialogContent>\n                            </AlertDialog>\n                        </TableCell>\n                      </TableRow>\n                    )) : (\n                     <TableRow>\n                      <TableCell colSpan={8} className="text-center text-muted-foreground py-8">\n                         {selectedCategoryFilter === "all"\n                            ? "You haven't added any products yet."\n                            : \`No items found in category: "\${selectedCategoryFilter}".\`}\n                      </TableCell>\n                    </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n                )}\n            </CardContent>\n          </Card>\n        );\n    }\n  };\n\n  if (isLoadingSession) {\n    return (\n      <div className="container mx-auto py-8 px-4 sm:px-6 lg:px-8 space-y-6">\n        <div className="flex items-center justify-between mb-8">\n          <div>\n            <Skeleton className="h-8 w-48 mb-2" />\n            <Skeleton className="h-4 w-64" />\n          </div>\n          <Skeleton className="h-10 w-32" />\n        </div>\n        <Card className="shadow-lg">\n          <CardHeader>\n            <Skeleton className="h-6 w-1/2 mb-1"/>\n            <Skeleton className="h-4 w-3/4"/>\n          </CardHeader>\n          <CardContent>\n            <Skeleton className="h-40 w-full" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <Dialog onOpenChange={setIsAddCustomItemDialogOpen}>\n        <div className="container mx-auto py-8 px-4 sm:px-6 lg:px-8">\n        <div className="flex items-center justify-between mb-8">\n            <div>\n            <h1 className="text-3xl font-bold tracking-tight text-foreground">Inventory Management</h1>\n            <p className="text-muted-foreground">\n                {session?.shopName ? \`\${session.shopName} (\${session.storeCategory})\` : 'Manage your products and stock.'}\n            </p>\n            </div>\n        </div>\n        {renderInventoryContent()}\n        <EditItemDialog\n            item={editingItem}\n            vendorId={session?.uid || null}\n            isOpen={isEditDialogOpen}\n            onOpenChange={setIsEditDialogOpen}\n            onItemUpdate={() => session?.uid && fetchAndSetInventory(session.uid, true)}\n        />\n        <AddGlobalItemDialog \n            item={itemToAdd}\n            isOpen={isAddGlobalItemDialogOpen}\n            onOpenChange={setIsAddGlobalItemDialogOpen}\n            onItemAdded={() => session?.uid && fetchAndSetInventory(session.uid, true)}\n        />\n        <AddCustomItemDialog\n            isOpen={isAddCustomItemDialogOpen}\n            onOpenChange={setIsAddCustomItemDialogOpen}\n            onItemAdded={() => session?.uid && fetchAndSetInventory(session.uid, true)}\n        />\n        <p className="mt-8 text-center text-sm text-muted-foreground">\n            Use the Admin panel for managing the global item catalog.\n        </p>\n        </div>\n    </Dialog>\n  );\n}`
  },
  {
    path: "src/app/(app)/layout.tsx",
    content: `'use client';\n\nimport { AppShell } from '@/components/layout/AppShell';\n\ninterface AppLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function AppLayout({ children }: AppLayoutProps) {\n  return <AppShell>{children}</AppShell>;\n}`
  },
  {
    path: "src/app/(app)/orders/[id]/OrderStatusUpdater.tsx",
    content: `'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Edit3, Loader2, Save } from 'lucide-react';\nimport type { VendorDisplayOrder, VendorOrderPortion } from '@/lib/orderModels';\nimport { updateVendorOrderStatus } from '../actions';\n\n\ninterface OrderStatusUpdaterProps {\n    order: VendorDisplayOrder;\n}\n\nexport function OrderStatusUpdater({ order }: OrderStatusUpdaterProps) {\n    const router = useRouter();\n    const { toast } = useToast();\n    const [newStatus, setNewStatus] = useState<VendorOrderPortion['status']>(order.vendorPortion.status);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const availableStatuses: VendorOrderPortion['status'][] = ["New", "Preparing", "Ready for Pickup", "Picked Up"];\n\n    const handleSaveStatus = async () => {\n        setIsLoading(true);\n        const result = await updateVendorOrderStatus(order.orderId, newStatus);\n        if (result.success) {\n            toast({ title: 'Success', description: 'Order status has been updated.' });\n            router.refresh(); // Refresh the page to show the new status\n        } else {\n            toast({ variant: 'destructive', title: 'Error', description: result.error || 'Failed to update status.' });\n        }\n        setIsLoading(false);\n    };\n\n    const isStatusUpdatable = order.overallStatus !== 'Completed' && order.overallStatus !== 'Cancelled';\n\n    return (\n        <Card className="shadow-lg">\n            <CardHeader>\n                <CardTitle className="text-xl flex items-center"><Edit3 className="mr-2 h-5 w-5 text-primary" />Update Status</CardTitle>\n                <CardDescription>Change the current status of this order.</CardDescription>\n            </CardHeader>\n            <CardContent className="space-y-4">\n                <Select \n                    value={newStatus}\n                    onValueChange={(value) => setNewStatus(value as VendorOrderPortion['status'])}\n                    disabled={!isStatusUpdatable || isLoading}\n                >\n                    <SelectTrigger>\n                        <SelectValue placeholder="Select a new status" />\n                    </SelectTrigger>\n                    <SelectContent>\n                        {availableStatuses.map(status => (\n                            <SelectItem key={status} value={status}>\n                                {status}\n                            </SelectItem>\n                        ))}\n                    </SelectContent>\n                </Select>\n                \n                <Button \n                    onClick={handleSaveStatus}\n                    className="w-full bg-primary hover:bg-primary/90 text-primary-foreground"\n                    disabled={!isStatusUpdatable || isLoading || newStatus === order.vendorPortion.status}\n                >\n                    {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Save className="mr-2 h-4 w-4" />}\n                    Save Status\n                </Button>\n                {!isStatusUpdatable && (\n                    <p className="text-xs text-center text-destructive">\n                        This order is already {order.overallStatus.toLowerCase()} and cannot be updated.\n                    </p>\n                )}\n            </CardContent>\n        </Card>\n    );\n}`
  },
  {
    path: "src/app/(app)/orders/[id]/page.tsx",
    content: `import { Badge } from "@/components/ui/badge";\nimport { Button } from "@/components/ui/button";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";\nimport { Separator } from "@/components/ui/separator";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";\nimport { ArrowLeft, PackageCheck, CookingPot, PackageOpen, CheckCircle2, Printer, Edit3, ShoppingBag, User, CalendarDays, Hash, DollarSign, XCircle } from "lucide-react";\nimport Link from "next/link";\nimport { fetchOrderDetails } from '../actions';\nimport { notFound } from 'next/navigation';\nimport { format, parseISO } from 'date-fns';\nimport { Timestamp } from 'firebase/firestore';\nimport type { VendorOrderPortion } from "@/lib/orderModels";\nimport { OrderStatusUpdater } from "./OrderStatusUpdater";\n\n\nconst statusDetails: Record<VendorOrderPortion['status'] | 'Completed' | 'Cancelled', { icon: React.ReactElement; color: string; description: string }> = {\n  "New": { icon: <PackageOpen className="h-5 w-5" />, color: "text-blue-500", description: "This is a new order, awaiting your confirmation." },\n  "Preparing": { icon: <CookingPot className="h-5 w-5" />, color: "text-orange-500", description: "You are preparing this order." },\n  "Ready for Pickup": { icon: <PackageCheck className="h-5 w-5" />, color: "text-yellow-600", description: "The order is ready for customer pickup." },\n  "Picked Up": { icon: <CheckCircle2 className="h-5 w-5" />, color: "text-green-500", description: "The customer has picked up the order." },\n  "Completed": { icon: <CheckCircle2 className="h-5 w-5" />, color: "text-green-500", description: "The order has been completed and picked up." },\n  "Cancelled": { icon: <XCircle className="h-5 w-5" />, color: "text-red-500", description: "This order has been cancelled." },\n  "Pending Vendor Confirmation": { icon: <PackageOpen className="h-5 w-5" />, color: "text-blue-500", description: "This is a new order, awaiting your confirmation." },\n};\n\n\nexport default async function OrderDetailPage({ params }: { params: { id:string } }) {\n  const order = await fetchOrderDetails(params.id);\n\n  if (!order) {\n    notFound();\n  }\n\n  const vendorStatus = order.vendorPortion.status;\n  // Use overallStatus for Completed/Cancelled as vendorPortion status might not reflect this.\n  const displayStatusKey = order.overallStatus === 'Completed' || order.overallStatus === 'Cancelled' ? order.overallStatus : vendorStatus;\n  const currentStatusInfo = statusDetails[displayStatusKey];\n  const orderDate = order.createdAt ? format(order.createdAt instanceof Timestamp ? order.createdAt.toDate() : parseISO(order.createdAt as string), "PPP p") : 'N/A';\n\n  return (\n    <div className="container mx-auto py-8 px-4 sm:px-6 lg:px-8">\n      <div className="mb-6">\n        <Button variant="outline" asChild>\n          <Link href="/orders">\n            <ArrowLeft className="mr-2 h-4 w-4" />\n            Back to Orders\n          </Link>\n        </Button>\n      </div>\n\n      <div className="grid gap-8 md:grid-cols-3">\n        <div className="md:col-span-2 space-y-8">\n          <Card className="shadow-lg">\n            <CardHeader className="flex flex-row items-center justify-between">\n              <div>\n                <CardTitle className="text-2xl">Order {order.orderId}</CardTitle>\n                <CardDescription>Order placed on {orderDate}.</CardDescription>\n              </div>\n              <div className="flex gap-2">\n                <Button variant="outline" size="sm"><Printer className="mr-2 h-4 w-4" /> Print</Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className={\`flex items-center gap-3 p-4 rounded-md border bg-card mb-6 \${currentStatusInfo.color.replace('text-', 'border-').replace('-500', '-200 dark:border-slate-700')}\`}>\n                <span className={currentStatusInfo.color}>{currentStatusInfo.icon}</span>\n                <div>\n                  <p className={\`font-semibold \${currentStatusInfo.color}\`}>{displayStatusKey}</p>\n                  <p className="text-sm text-muted-foreground">{currentStatusInfo.description}</p>\n                </div>\n              </div>\n              \n              <h3 className="text-lg font-semibold mb-3 text-foreground">Items Ordered</h3>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Product</TableHead>\n                    <TableHead className="text-center">Quantity</TableHead>\n                    <TableHead className="text-right">Price</TableHead>\n                    <TableHead className="text-right">Total</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {order.vendorPortion.items.map((item) => (\n                    <TableRow key={item.itemId}>\n                      <TableCell className="font-medium">{item.name}</TableCell>\n                      <TableCell className="text-center">{item.quantity}</TableCell>\n                      <TableCell className="text-right">â¹{item.pricePerItem.toFixed(2)}</TableCell>\n                      <TableCell className="text-right">â¹{item.totalPrice.toFixed(2)}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              <Separator className="my-6" />\n              <div className="grid gap-2 text-sm text-muted-foreground">\n                <div className="flex justify-between">\n                  <span>Subtotal (Your Portion)</span>\n                  <span className="font-medium text-foreground">â¹{order.vendorPortion.vendorSubtotal.toFixed(2)}</span>\n                </div>\n                <div className="flex justify-between">\n                  <span>Platform Fee</span>\n                  <span className="font-medium text-foreground">â¹{order.platformFee.toFixed(2)}</span>\n                </div>\n                <Separator className="my-2" />\n                <div className="flex justify-between font-semibold text-lg text-foreground">\n                  <span>Grand Total</span>\n                  <span>â¹{order.grandTotal.toFixed(2)}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className="space-y-8">\n          <Card className="shadow-lg">\n            <CardHeader>\n              <CardTitle className="text-xl flex items-center"><User className="mr-2 h-5 w-5 text-primary" /> Customer Details</CardTitle>\n            </CardHeader>\n            <CardContent className="space-y-2 text-sm text-muted-foreground">\n              <p><strong className="text-foreground">Name:</strong> {order.customerInfo?.name || 'N/A'}</p>\n              <p><strong className="text-foreground">Phone:</strong> {order.customerInfo?.phoneNumber || 'N/A'}</p>\n              {order.tripDestination && (\n                <>\n                 <Separator className="my-3"/>\n                 <p className="font-medium text-foreground">Delivery Address:</p>\n                 <p>{order.tripDestination}</p>\n                </>\n              )}\n            </CardContent>\n          </Card>\n\n          <OrderStatusUpdater order={order} />\n        </div>\n      </div>\n    </div>\n  );\n}`
  },
  {
    path: "src/app/(app)/orders/actions.ts",
    content: `'use server';\n\nimport { db } from '@/lib/firebase-admin-client';\nimport { collection, query, where, getDocs, doc, getDoc, updateDoc, Timestamp, WriteBatch, writeBatch, runTransaction } from 'firebase/firestore';\nimport type { PlacedOrder, VendorOrderPortion, VendorDisplayOrder, OrderItemDetail } from '@/lib/orderModels';\nimport { getSession } from '@/lib/auth';\nimport { revalidatePath } from 'next/cache';\n\n/**\n * Fetches all relevant orders for a given vendor using an efficient 'array-contains' query.\n * An order is relevant if its vendorIds array contains the vendor's ID and its status is active.\n */\nexport async function fetchVendorOrders(vendorId: string): Promise<VendorDisplayOrder[]> {\n  if (!vendorId) {\n    console.error("[fetchVendorOrders] vendorId is required.");\n    return [];\n  }\n\n  const ordersRef = collection(db, 'orders');\n  // These are the statuses we consider "active" and want to display on the main dashboard.\n  const activeStatuses: PlacedOrder['overallStatus'][] = ["Pending Confirmation", "Confirmed", "In Progress", "Ready for Pickup"];\n  \n  // New, more efficient compound query.\n  const q = query(\n    ordersRef,\n    where("vendorIds", "array-contains", vendorId),\n    where("overallStatus", "in", activeStatuses)\n  );\n  \n  try {\n    const querySnapshot = await getDocs(q);\n    const relevantOrders: VendorDisplayOrder[] = [];\n\n    querySnapshot.forEach(docSnap => {\n      const orderData = { id: docSnap.id, ...docSnap.data() } as PlacedOrder;\n      const vendorPortion = orderData.vendorPortions.find(p => p.vendorId === vendorId);\n\n      if (vendorPortion) {\n        // Exclude the full vendorPortions array and add the specific one for the display model.\n        const { vendorPortions, ...rootOrderData } = orderData;\n        relevantOrders.push({\n          ...rootOrderData,\n          vendorPortion: vendorPortion\n        });\n      }\n    });\n\n    // Sort by creation date, newest first\n    relevantOrders.sort((a, b) => {\n        const dateA = a.createdAt instanceof Timestamp ? a.createdAt.toMillis() : new Date(a.createdAt as string).getTime();\n        const dateB = b.createdAt instanceof Timestamp ? b.createdAt.toMillis() : new Date(b.createdAt as string).getTime();\n        return dateB - dateA;\n    });\n\n    console.log(\`[fetchVendorOrders] Found \${relevantOrders.length} relevant orders for vendor \${vendorId}\`);\n    return relevantOrders;\n    \n  } catch (error) {\n    console.error(\`[fetchVendorOrders] Error fetching orders for vendor \${vendorId}:\`, error);\n    // Handle potential index errors\n    if (error instanceof Error && error.message.includes("requires an index")) {\n      console.error("Firestore index missing. Please create the required composite index on the 'orders' collection for ('vendorIds' array-contains) and ('overallStatus' in).");\n    }\n    return [];\n  }\n}\n\n\n/**\n * Updates the status of a specific vendor's portion of an order.\n * Can also update the item list for grocery confirmations.\n */\nexport async function updateVendorOrderStatus(\n  orderId: string,\n  newStatus: VendorOrderPortion['status'],\n  updatedItems?: OrderItemDetail[]\n): Promise<{ success: boolean; error?: string }> {\n  const session = await getSession();\n  const vendorEmail = session?.email;\n\n  if (!vendorEmail) {\n    return { success: false, error: "Authentication required." };\n  }\n  if (!orderId) {\n    return { success: false, error: "Order ID is required." };\n  }\n\n  const orderRef = doc(db, 'orders', orderId);\n\n  try {\n    await runTransaction(db, async (transaction) => {\n        const orderSnap = await transaction.get(orderRef);\n        if (!orderSnap.exists()) {\n            throw new Error("Order not found.");\n        }\n\n        const orderData = orderSnap.data() as PlacedOrder;\n        let vendorFound = false;\n        let newVendorSubtotal = 0;\n\n        const updatedPortions = orderData.vendorPortions.map(portion => {\n            if (portion.vendorId === vendorEmail) {\n                vendorFound = true;\n                if (updatedItems) {\n                    // This is a grocery confirmation, recalculate subtotal\n                    newVendorSubtotal = updatedItems.reduce((sum, item) => sum + item.totalPrice, 0);\n                    return { ...portion, status: newStatus, items: updatedItems, vendorSubtotal: newVendorSubtotal };\n                }\n                // For non-grocery flow or status changes after confirmation\n                return { ...portion, status: newStatus };\n            }\n            return portion;\n        });\n\n        if (!vendorFound) {\n            throw new Error("This order does not concern you.");\n        }\n        \n        const allOtherPortionsReady = updatedPortions\n            .filter(p => p.vendorId !== vendorEmail)\n            .every(p => p.status === 'Ready for Pickup');\n            \n        const thisPortionReady = newStatus === 'Ready for Pickup';\n\n        const updatePayload: any = { vendorPortions: updatedPortions };\n\n        // If this action makes all portions ready for pickup, update the overall status.\n        if (thisPortionReady && allOtherPortionsReady) {\n            updatePayload.overallStatus = 'Ready for Pickup';\n        }\n\n        // If items were updated (grocery flow), we need to recalculate the grand total.\n        if (updatedItems) {\n            const oldPortion = orderData.vendorPortions.find(p => p.vendorId === vendorEmail);\n            const oldSubtotal = oldPortion?.vendorSubtotal || 0;\n            const difference = newVendorSubtotal - oldSubtotal;\n            updatePayload.grandTotal = orderData.grandTotal + difference;\n        }\n\n        transaction.update(orderRef, updatePayload);\n    });\n\n    console.log(\`[updateVendorOrderStatus] Successfully updated status to '\${newStatus}' for vendor \${vendorEmail} in order \${orderId}\`);\n    revalidatePath('/orders');\n    revalidatePath(\`/orders/\${orderId}\`);\n    return { success: true };\n\n  } catch (error) {\n    console.error(\`[updateVendorOrderStatus] Error updating order \${orderId}:\`, error);\n    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";\n    return { success: false, error: \`Failed to update order status. \${errorMessage}\` };\n  }\n}\n\n/**\n * Fetches details for a single order, tailored for the vendor view.\n */\nexport async function fetchOrderDetails(orderId: string): Promise<VendorDisplayOrder | null> {\n    const session = await getSession();\n    const vendorEmail = session?.email;\n\n    if (!vendorEmail) {\n        console.error("[fetchOrderDetails] Not authenticated.");\n        return null;\n    }\n\n    const orderRef = doc(db, 'orders', orderId);\n    try {\n        const docSnap = await getDoc(orderRef);\n        if (!docSnap.exists()) {\n            console.warn(\`[fetchOrderDetails] Order \${orderId} not found.\`);\n            return null;\n        }\n\n        const orderData = { id: docSnap.id, ...docSnap.data() } as PlacedOrder;\n        const vendorPortion = orderData.vendorPortions.find(p => p.vendorId === vendorEmail);\n\n        if (!vendorPortion) {\n            console.warn(\`[fetchOrderDetails] Vendor \${vendorEmail} not part of order \${orderId}.\`);\n            return null;\n        }\n\n        const { vendorPortions, ...rootOrderData } = orderData;\n        return {\n            ...rootOrderData,\n            vendorPortion: vendorPortion\n        };\n\n    } catch (error) {\n        console.error(\`[fetchOrderDetails] Error fetching order \${orderId}:\`, error);\n        return null;\n    }\n}`
  },
  {
    path: "src/app/(app)/orders/page.tsx",
    content: `'use client';\n\nimport { useEffect, useState, useMemo } from 'react';\nimport { Button } from "@/components/ui/button";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";\nimport { Switch } from "@/components/ui/switch";\nimport { ShoppingCart, Clock, CheckCircle, LogOut, Loader2 } from "lucide-react";\nimport Image from "next/image";\nimport { logout } from '@/lib/auth';\nimport { OrderCard } from '@/components/orders/OrderCard';\nimport { useToast } from '@/hooks/use-toast';\nimport { useRouter } from 'next/navigation';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { collection, query, where, onSnapshot, Timestamp, doc, getDoc } from "firebase/firestore";\nimport { useFirebaseAuth } from '@/components/auth/FirebaseAuthProvider';\nimport type { PlacedOrder, VendorDisplayOrder } from '@/lib/orderModels';\nimport type { Vendor } from '@/lib/inventoryModels';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useSession } from '@/hooks/use-session';\n\nexport default function OrdersPage() {\n  const { db } = useFirebaseAuth();\n  const { session, isLoading: isLoadingSession } = useSession();\n  const [isShopOpen, setIsShopOpen] = useState(true);\n  const [orders, setOrders] = useState<VendorDisplayOrder[]>([]);\n  const [isLoadingOrders, setIsLoadingOrders] = useState(true);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  // Set up the real-time listener for orders when the session is available\n  useEffect(() => {\n    if (!session || !db) {\n      if (!isLoadingSession) {\n        // If session loading is finished and there's no session, clear orders.\n        setOrders([]);\n        setIsLoadingOrders(false);\n      }\n      return;\n    }\n\n    setIsLoadingOrders(true);\n    console.log(\`Setting up real-time order listener for vendor email: \${session.email}\`);\n    \n    const ordersRef = collection(db, "orders");\n    const activeStatuses = ["Pending Confirmation", "Confirmed", "In Progress", "Ready for Pickup", "New"];\n\n    const q = query(ordersRef,\n        where("vendorIds", "array-contains", session.email),\n        where("overallStatus", "in", activeStatuses)\n    );\n\n    const unsubscribeSnapshot = onSnapshot(q, (querySnapshot) => {\n      const fetchedOrders: VendorDisplayOrder[] = [];\n      querySnapshot.forEach((docSnap) => {\n        const orderData = { id: docSnap.id, ...docSnap.data() } as PlacedOrder;\n        const vendorPortion = orderData.vendorPortions.find(p => p.vendorId === session.email);\n\n        if (vendorPortion) {\n            const { vendorPortions, ...rootOrderData } = orderData;\n            fetchedOrders.push({\n                ...rootOrderData,\n                vendorPortion: vendorPortion\n            });\n        }\n      });\n\n      fetchedOrders.sort((a, b) => {\n          const dateA = a.createdAt instanceof Timestamp ? a.createdAt.toMillis() : new Date(a.createdAt as string).getTime();\n          const dateB = b.createdAt instanceof Timestamp ? b.createdAt.toMillis() : new Date(b.createdAt as string).getTime();\n          return dateB - dateA;\n      });\n      \n      setOrders(fetchedOrders);\n      setIsLoadingOrders(false);\n      console.log(\`Real-time update for \${session.email}! Orders:\`, fetchedOrders);\n    }, (error) => {\n      console.error("Error with real-time order listener:", error);\n      toast({\n            variant: 'destructive',\n            title: 'Failed to Listen for Orders',\n            description: 'Please check the developer console. A Firestore index may be required.'\n      });\n      setIsLoadingOrders(false);\n    });\n\n    return () => {\n        console.log("Cleaning up order listener.");\n        unsubscribeSnapshot();\n    };\n  }, [session, db, toast, isLoadingSession]);\n\n  const { newOrders, preparingOrders, readyOrders } = useMemo(() => {\n    const newOrPending = orders.filter(o => o.vendorPortion.status === 'New' || o.vendorPortion.status === 'Pending Vendor Confirmation');\n    return {\n      newOrders: newOrPending,\n      preparingOrders: orders.filter(o => o.vendorPortion.status === 'Preparing'),\n      readyOrders: orders.filter(o => o.vendorPortion.status === 'Ready for Pickup'),\n    };\n  }, [orders]);\n\n  const handleToggleShopStatus = () => {\n    setIsShopOpen(!isShopOpen);\n    toast({\n        title: \`Shop is now \${!isShopOpen ? "Online" : "Offline"}\`,\n        description: \`You can now \${!isShopOpen ? "receive" : "no longer receive"} new orders.\`,\n    });\n  };\n\n  const handleLogout = async () => {\n    await logout();\n    toast({ title: "Logged Out", description: "You have been successfully logged out." });\n  };\n  \n  const renderOrdersList = (orderList: VendorDisplayOrder[], status: 'New' | 'Preparing' | 'Ready') => {\n    if (isLoadingOrders) {\n      return (\n         <div className="space-y-4">\n          <Skeleton className="h-48 w-full rounded-lg" />\n          <Skeleton className="h-48 w-full rounded-lg" />\n        </div>\n      );\n    }\n\n    if (orderList.length > 0) {\n      return (\n        <div className="space-y-4">\n          {orderList.map(order => (\n            <OrderCard key={order.orderId} order={order} />\n          ))}\n        </div>\n      );\n    }\n\n    let Icon, title, description;\n    switch (status) {\n        case 'New':\n            Icon = ShoppingCart;\n            title = 'No New Orders';\n            description = 'When new orders come in, they will appear here.';\n            break;\n        case 'Preparing':\n            Icon = Clock;\n            title = 'No Orders in Preparation';\n            description = 'Accepted orders being prepared will show up here.';\n            break;\n        case 'Ready':\n            Icon = CheckCircle;\n            title = 'No Orders Ready for Pickup';\n            description = 'Orders marked as ready will be listed here.';\n            break;\n        default:\n            return null;\n    }\n    \n    return (\n        <Card className="shadow-none border-dashed">\n            <CardContent className="p-6 text-center">\n                <Icon className="mx-auto h-12 w-12 text-muted-foreground mb-4" />\n                <h3 className="text-xl font-semibold text-foreground">{title}</h3>\n                <p className="text-muted-foreground">{description}</p>\n            </CardContent>\n        </Card>\n    );\n  };\n\n\n  return (\n    <div className="flex flex-col min-h-screen bg-background">\n      {/* Header Section */}\n      <header className="bg-primary text-primary-foreground p-4 shadow-md">\n        <div className="container mx-auto">\n          <div className="flex items-center justify-between mb-3">\n            <div className="flex items-center gap-3">\n              <div className="w-12 h-12 rounded-full bg-white flex items-center justify-center overflow-hidden">\n                {isLoadingSession ? (\n                    <Skeleton className="h-12 w-12 rounded-full" />\n                ) : (\n                    <Image src={session?.shopImageUrl || "https://placehold.co/60x60.png"} alt="Shop Logo" width={48} height={48} data-ai-hint="shop logo" />\n                )}\n              </div>\n              <div>\n                {isLoadingSession ? (\n                    <div className="space-y-1">\n                        <Skeleton className="h-6 w-32" />\n                        <Skeleton className="h-4 w-24" />\n                    </div>\n                ) : (\n                    <>\n                        <h1 className="text-xl font-bold">{session?.shopName || "Your Shop"}</h1>\n                        <p className="text-xs opacity-90">{session?.storeCategory || "Category"}</p>\n                    </>\n                )}\n              </div>\n            </div>\n            <div className="flex items-center gap-3">\n              <div className="flex items-center gap-2">\n                <Switch\n                  id="shop-status-toggle"\n                  checked={isShopOpen}\n                  onCheckedChange={handleToggleShopStatus}\n                  aria-label="Toggle shop open/closed"\n                  className="data-[state=checked]:bg-green-500 data-[state=unchecked]:bg-red-500"\n                />\n                <label htmlFor="shop-status-toggle" className="text-sm font-medium">\n                  {isShopOpen ? "Online" : "Offline"}\n                </label>\n              </div>\n              <form action={logout}>\n                <Button \n                  type="submit"\n                  variant="outline" \n                  size="sm" \n                  className="text-primary-foreground border-primary-foreground/50 hover:bg-primary/80 hover:text-primary-foreground"\n                >\n                  <LogOut className="mr-2 h-4 w-4" />\n                  Logout\n                </Button>\n              </form>\n            </div>\n          </div>\n          <div className="mt-2 rounded-md overflow-hidden">\n            <Image\n              src="https://placehold.co/600x100.png" \n              alt="Thru Loans Banner"\n              width={600}\n              height={100}\n              className="w-full object-cover"\n              data-ai-hint="advertisement banner"\n            />\n          </div>\n        </div>\n      </header>\n\n      {/* Tabs for Order Status */}\n      <div className="container mx-auto py-4 px-2 sm:px-4">\n        <Tabs defaultValue="new" className="w-full">\n          <TabsList className="grid w-full grid-cols-3 bg-muted p-1 rounded-md">\n            <TabsTrigger value="new" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground">\n                New ({isLoadingOrders ? <Loader2 className="h-4 w-4 animate-spin"/> : newOrders.length})\n            </TabsTrigger>\n            <TabsTrigger value="preparing" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground">\n                Preparing ({isLoadingOrders ? <Loader2 className="h-4 w-4 animate-spin"/> : preparingOrders.length})\n            </TabsTrigger>\n            <TabsTrigger value="ready" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground">\n                Ready ({isLoadingOrders ? <Loader2 className="h-4 w-4 animate-spin"/> : readyOrders.length})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value="new" className="mt-6">\n            {renderOrdersList(newOrders, 'New')}\n          </TabsContent>\n\n          <TabsContent value="preparing" className="mt-6">\n            {renderOrdersList(preparingOrders, 'Preparing')}\n          </TabsContent>\n\n          <TabsContent value="ready" className="mt-6">\n            {renderOrdersList(readyOrders, 'Ready')}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}`
  },
  // ... continue for all files
];

function CodeViewer({ path, content }: { path: string, content: string }) {
  const { toast } = useToast();

  const handleCopy = () => {
    navigator.clipboard.writeText(content);
    toast({
      title: "Copied to clipboard!",
      description: `Content of ${path} is ready to be pasted.`,
    });
  };

  return (
    <Card className="font-mono text-sm">
      <CardHeader>
        <div className="flex justify-between items-center">
          <CardTitle className="text-base">{path}</CardTitle>
          <Button variant="ghost" size="icon" onClick={handleCopy}>
            <Clipboard className="h-4 w-4" />
          </Button>
        </div>
      </CardHeader>
      <CardContent className="bg-muted p-4 rounded-b-lg overflow-x-auto">
        <pre><code>{content}</code></pre>
      </CardContent>
    </Card>
  );
}

export default function ExportPage() {
  const filePaths = fileContents.map(f => f.path);

  return (
    <div className="container mx-auto py-8 px-4 sm:px-6 lg:px-8">
      <header className="mb-8">
        <h1 className="text-3xl font-bold tracking-tight text-foreground">Application Code Export</h1>
        <p className="text-muted-foreground mt-2">
          This is a temporary workaround to bypass GitHub authentication issues. Please follow these steps:
        </p>
        <ol className="list-decimal list-inside mt-2 text-sm space-y-1">
          <li>On your local computer, create a new folder for this project.</li>
          <li>Open a terminal in that new folder and run <code className="bg-muted px-1 py-0.5 rounded">git clone https://github.com/keval65-modal/thru-vendor-firebase.git .</code></li>
          <li>For each file listed below, create the file (including any folders) on your local machine.</li>
          <li>Click the copy button for each file and paste the content into the corresponding local file.</li>
          <li>Once all files are created locally, run <code className="bg-muted px-1 py-0.5 rounded">git add .</code>, then <code className="bg-muted px-1 py-0.5 rounded">git commit -m "Initial commit"</code>, and finally <code className="bg-muted px-1 py-0.5 rounded">git push origin main</code>.</li>
           <li>After successfully pushing, ask me to restore the dashboard to its original state.</li>
        </ol>
      </header>

      <Tabs defaultValue={filePaths[0]} className="w-full">
        <TabsList className="h-auto flex-wrap justify-start">
          {filePaths.map(path => (
            <TabsTrigger key={path} value={path}>{path}</TabsTrigger>
          ))}
        </TabsList>
        {fileContents.map(file => (
          <TabsContent key={file.path} value={file.path}>
            <CodeViewer path={file.path} content={file.content} />
          </TabsContent>
        ))}
      </Tabs>
    </div>
  );
}

    